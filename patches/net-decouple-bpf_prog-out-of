Bottom: 2be4ba096dd79076b5a6723f7a7b3f138d85311e
Top:    e472511ce0c4efdbc099d667b8851311ba0bdc27
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-07-25 14:00:02 +0800

net: decouple bpf_prog out of skb in do_xdp_generic()

Sometimes, we want to do generic XDP at device driver layer, this
requires us to decouple bpf_prog out of skb->dev.


---

diff --git a/net/core/dev.c b/net/core/dev.c
index d1b9c9b..e306528 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3943,10 +3943,8 @@ static void generic_xdp_tx(struct sk_buff *skb, struct bpf_prog *xdp_prog)
 
 static struct static_key generic_xdp_needed __read_mostly;
 
-static int do_xdp_generic(struct sk_buff *skb)
+static int do_xdp_generic(struct bpf_prog *xdp_prog, struct sk_buff *skb)
 {
-	struct bpf_prog *xdp_prog = rcu_dereference(skb->dev->xdp_prog);
-
 	if (xdp_prog) {
 		u32 act = netif_receive_generic_xdp(skb, xdp_prog);
 		int err;
@@ -3981,7 +3979,8 @@ static int netif_rx_internal(struct sk_buff *skb)
 	trace_netif_rx(skb);
 
 	if (static_key_false(&generic_xdp_needed)) {
-		int ret = do_xdp_generic(skb);
+		int ret = do_xdp_generic(rcu_dereference(skb->dev->xdp_prog),
+					 skb);
 
 		/* Consider XDP consuming the packet a success from
 		 * the netdev point of view we do not want to count
@@ -4502,7 +4501,8 @@ static int netif_receive_skb_internal(struct sk_buff *skb)
 	rcu_read_lock();
 
 	if (static_key_false(&generic_xdp_needed)) {
-		int ret = do_xdp_generic(skb);
+		int ret = do_xdp_generic(rcu_dereference(skb->dev->xdp_prog),
+					 skb);
 
 		if (ret != XDP_PASS) {
 			rcu_read_unlock();
