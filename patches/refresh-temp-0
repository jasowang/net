Bottom: 69bc80db6e3360c69b2be2547bfb9aa3137c0156
Top:    37ffac957be4d7a2fc9f2dbdfc8f4ed2ef3b692e
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-07-04 20:49:01 +0800

Refresh of tuntap-switch-to-use

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 2290639..13447f7 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -187,6 +187,7 @@ struct tun_file {
 	struct ptr_ring tx_ring;
 	struct xdp_rxq_info xdp_rxq;
 	struct list_head rx_list;
+	int rx_batched;
 };
 
 struct tun_flow_entry {
@@ -1575,17 +1576,23 @@ static void tun_rx_batched(struct tun_struct *tun, struct tun_file *tfile,
 	}
 
 	spin_lock(&queue->lock);
-	if (!more || skb_queue_len(queue) == rx_batched) {
+	if (!more || tfile->rx_batched == rx_batched) {
+		INIT_LIST_HEAD(&head);
 		list_splice_tail_init(&tfile->rx_list, &list);
+		tfile->rx_batched = 0;
 		rcv = true;
 	} else {
+		++tfile->rx_batched;
 		list_add_tail(&skb->list, &tfile->rx_list);
 	}
 	spin_unlock(&queue->lock);
 
 	if (rcv) {
+		struct sk_buff *nskb;
+
 		local_bh_disable();
-		netif_receive_skb_list(&list);
+		list_for_each_entry(nskb, &tfile->rx_list, list)
+			netif_receive_skb(nskb);
 		local_bh_enable();
 	}
 }
@@ -3255,6 +3262,7 @@ static int tun_chr_open(struct inode *inode, struct file * file)
 	file->private_data = tfile;
 	INIT_LIST_HEAD(&tfile->next);
 	INIT_LIST_HEAD(&tfile->rx_list);
+	tfile->rx_batched = 0;
 
 	sock_set_flag(&tfile->sk, SOCK_ZEROCOPY);
