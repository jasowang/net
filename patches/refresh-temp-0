Bottom: 6fd49c721b483eccd20097efc322f7871c61bba3
Top:    93f33124a9df5e450387a019e5f83f9f772c80d8
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-02-11 16:05:38 +0800

Refresh of debug-1

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 0dc66e4..14ac8d7 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -1119,6 +1119,7 @@ static netdev_tx_t tun_net_xmit(struct sk_buff *skb, struct net_device *dev)
 	/* Notify and wake up reader process */
 	if (tfile->flags & TUN_FASYNC)
 		kill_fasync(&tfile->fasync, SIGIO, POLL_IN);
+	printk("wake up !\n");
 	tfile->socket.sk->sk_data_ready(tfile->socket.sk);
 
 	rcu_read_unlock();
diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index 87d989a..7f05607 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -483,6 +483,8 @@ static void handle_tx(struct vhost_net *net)
 	if (!vq_iotlb_prefetch(vq))
 		goto out;
 
+	printk("handle tx!\n");
+
 	vhost_disable_notify(&net->dev, vq);
 	vhost_net_disable_vq(net, vq);
 
@@ -587,6 +589,7 @@ static void handle_tx(struct vhost_net *net)
 		}
 	}
 out:
+	printk("tx done!\n");
 	mutex_unlock(&vq->mutex);
 }
 
@@ -782,6 +785,7 @@ static void handle_rx(struct vhost_net *net)
 		vq->log : NULL;
 	mergeable = vhost_has_feature(vq, VIRTIO_NET_F_MRG_RXBUF);
 
+	printk("handle rx!\n");
 	while ((sock_len = vhost_net_rx_peek_head_len(net, sock->sk))) {
 		sock_len += sock_hlen;
 		vhost_len = sock_len + vhost_hlen;
@@ -873,6 +877,7 @@ static void handle_rx(struct vhost_net *net)
 	}
 	vhost_net_enable_vq(net, vq);
 out:
+	printk("rx done!\n");
 	if (nheads)
 		vhost_add_used_and_signal_n(&net->dev, vq, vq->heads,
 					    nheads);
@@ -1268,9 +1273,10 @@ static int vhost_net_set_features(struct vhost_net *n, u64 features)
 			goto out_unlock;
 	}
 
-	if (features & (1ULL << VIRTIO_F_RING_PACKED))
+	if (features & (1ULL << VIRTIO_F_RING_PACKED)) {
+		dump_stack();
 		printk("packed ring!\n");
-	else
+	} else
 		printk("split ring!\n");
 
 	for (i = 0; i < VHOST_NET_VQ_MAX; ++i) {
diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index 716d4d0..88b4c05 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -327,7 +327,7 @@ static void vhost_vq_reset(struct vhost_dev *dev,
 	vhost_reset_is_le(vq);
 	vhost_disable_cross_endian(vq);
 	vq->busyloop_timeout = 0;
-	vq->used_warp_counter = false;
+	vq->used_wrap_counter = false;
 	vq->umem = NULL;
 	vq->iotlb = NULL;
 	__vhost_vq_meta_reset(vq);
@@ -2013,8 +2013,21 @@ static int get_indirect(struct vhost_virtqueue *vq,
 static bool desc_is_avail(struct vhost_virtqueue *vq,
 			  struct vring_desc_packed *desc)
 {
+	if (vq->used_wrap_counter) {
+		if ((desc->flags & VRING_DESC_F_AVAIL) &&
+		   !(desc->flags & VRING_DESC_F_USED))
+			return true;
+	} else {
+		if (!(desc->flags & VRING_DESC_F_AVAIL) &&
+		     (desc->flags & VRING_DESC_F_USED))
+			return true;
+	}
+	return false;
+
+#if 0
 	return ((desc->flags & cpu_to_vhost16(vq, VRING_DESC_F_AVAIL)) ^
 		(desc->flags & cpu_to_vhost16(vq, VRING_DESC_F_USED)));
+#endif
 }
 
 static void set_desc_used(struct vhost_virtqueue *vq,
@@ -2365,7 +2378,7 @@ static int vhost_add_used_n_packed(struct vhost_virtqueue *vq,
 	for (i = 0; i < count; i++) {
 		desc.id = heads[i].id;
 		desc.len = heads[i].len;
-		set_desc_used(vq, &desc, vq->used_warp_counter);
+		set_desc_used(vq, &desc, vq->used_wrap_counter);
 
 		/* Update flags etc before desc is written */
 		smp_mb();
@@ -2390,7 +2403,7 @@ static int vhost_add_used_n_packed(struct vhost_virtqueue *vq,
 				eventfd_signal(vq->log_ctx, 1);
 		}
 		if ((++vq->last_used_idx & (vq->num - 1)) == 0)
-			vq->used_warp_counter ^= 1;
+			vq->used_wrap_counter ^= 1;
 	}
 
 	return 0;
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index 657b7a6..93f694a 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -153,7 +153,7 @@ struct vhost_virtqueue {
 	bool user_be;
 #endif
 	u32 busyloop_timeout;
-	bool used_warp_counter;
+	bool used_wrap_counter;
 };
 
 struct vhost_msg_node {
