Bottom: c17e99cf2a621b9636320e7884155f4a8e78ce37
Top:    05b9948378226cc5d69e00637101ee61e32bd017
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-12-07 18:06:19 +0800

Refresh of tuntap-introduce-peer-mode

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index e13e061..586b88c 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -2570,7 +2570,7 @@ static int tun_set_steering_ebpf(struct tun_struct *tun, void __user *data)
 	return __tun_set_steering_ebpf(tun, prog);
 }
 
-static struct tap_dev *tap_dev_get_rcu(const struct net_device *dev)
+static struct tun_struct *tun_dev_get_rcu(const struct net_device *dev)
 {
 	return rcu_dereference(dev->rx_handler_data);
 }
@@ -2578,11 +2578,10 @@ static struct tap_dev *tap_dev_get_rcu(const struct net_device *dev)
 rx_handler_result_t tun_handle_frame(struct sk_buff **pskb)
 {
 	struct sk_buff *skb = *pskb;
-	struct tun_struct *tun = tun_dev_get_rcu(dev);
-	struct net_device *dev = tun->dev;
+	struct tun_struct *tun = tun_dev_get_rcu(skb->dev);
 
-	skb->dev = dev;
-	if (!is_skb_forwardable(dev, skb)) {
+	skb->dev = tun->dev;
+	if (!is_skb_forwardable(tun->dev, skb)) {
 		kfree_skb(skb);
 		return RX_HANDLER_CONSUMED;
 	}
@@ -2596,7 +2595,6 @@ static int tun_attach_peer(struct net *net, struct tun_struct *tun,
 			   struct ifreq *ifr)
 {
 	struct net_device *dev = __dev_get_by_name(net, ifr->ifr_name);
-	int ret;
 
 	if (!dev)
 		return -EFAULT;
@@ -2604,7 +2602,8 @@ static int tun_attach_peer(struct net *net, struct tun_struct *tun,
 	if (dev->netdev_ops != &tap_netdev_ops)
 		return -EFAULT;
 
-	return netdev_rx_handler_register(dev, tun_handle_frame, tun);
+	return netdev_rx_handler_register(netdev_priv(dev), tun_handle_frame,
+					  tun);
 }
 
 static long __tun_chr_ioctl(struct file *file, unsigned int cmd,
@@ -2891,7 +2890,7 @@ static long __tun_chr_ioctl(struct file *file, unsigned int cmd,
 		ret = -EINVAL;
 		if ((tun->flags & TUN_TYPE_MASK) != IFF_TAP)
 			break;
-		ret = tun_attach_peer(sock_net(&tfile->sk), &ifr);
+		ret = tun_attach_peer(sock_net(&tfile->sk), tun, &ifr);
 		break;
 	default:
 		ret = -EINVAL;
