Bottom: 11ab4ad1adc5ebf1cb32aa02d31e1a000e202870
Top:    07694aded7a77f51d6194f881b510f8feafa69a1
Author: Jason Wang <jasowang@redhat.com>
Date:   2016-05-10 21:39:49 +0800

Refresh of circular-buffer

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 3742456..827003e 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -528,12 +528,25 @@ static struct tun_struct *tun_enable_queue(struct tun_file *tfile)
 
 static void tun_queue_purge(struct tun_file *tfile)
 {
+	unsigned long head, tail;
+	struct tun_desc *desc;
+	struct sk_buff *skb;
 	skb_queue_purge(&tfile->sk.sk_receive_queue);
 	spin_lock(&tfile->rlock);
-	while (tfile->tail != tfile->head) {
-		struct sk_buff *skb = tfile->tx_descs[tfile->head].skb;
-		kfree_skb(skb);
-		tfile->head = (tfile->head + 1) & TUN_RING_MASK;
+
+	head = ACCESS_ONCE(tfile->head);
+	tail = tfile->tail;
+
+	/* read tail before reading descriptor at tail */
+	smp_rmb();
+
+	while (CIRC_CNT(head, tail, TUN_RING_SIZE) >= 1) {
+		desc = &tfile->tx_descs[tail];
+		skb = desc->skb;
+		consume_skb(skb);
+		tail = (tail + 1) & TUN_RING_MASK;
+		/* read descriptor before incrementing tail. */
+		smp_store_release(&tfile->tail, (tail + 1) & TUN_RING_MASK);
 	}
 	spin_unlock(&tfile->rlock);
 	skb_queue_purge(&tfile->sk.sk_error_queue);
@@ -1880,7 +1893,7 @@ static int tun_set_iff(struct net *net, struct file *file, struct ifreq *ifr)
 
 		tun = netdev_priv(dev);
 		tun->dev = dev;
-		tun->flags = flags;
+		tun->flags = flags | IFF_TX_RING;
 		tun->txflt.count = 0;
 		tun->vnet_hdr_sz = sizeof(struct virtio_net_hdr);
