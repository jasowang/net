Bottom: 1d7110f29ad1ba901810223233f63f8edcf2ae75
Top:    2be0331ae34c155e459c2d381ce424e5f56c320a
Author: Jason Wang <jasowang@redhat.com>
Date:   2016-06-24 15:53:41 +0800

Refresh of tuntap-convert-to-napi

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index b886ef2..f39c13b 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -169,6 +169,7 @@ struct tun_file {
 	struct list_head next;
 	struct tun_struct *detached;
 	struct napi_struct napi;
+	struct sk_buff_head process_queue;
 };
 
 struct tun_flow_entry {
@@ -517,6 +518,8 @@ static struct tun_struct *tun_enable_queue(struct tun_file *tfile)
 
 static void tun_queue_purge(struct tun_file *tfile)
 {
+	skb_queue_purge(&tfile->sk.sk_write_queue);
+	skb_queue_purge(&tfile->process_queue);
 	skb_queue_purge(&tfile->sk.sk_receive_queue);
 	skb_queue_purge(&tfile->sk.sk_error_queue);
 }
@@ -622,15 +625,25 @@ static void tun_detach_all(struct net_device *dev)
 static int tun_poll(struct napi_struct *napi, int budget)
 {
 	struct tun_file *tfile = container_of(napi, struct tun_file, napi);
+	struct sk_buff_head *input_queue =
+	       &tfile->socket.sk->sk_write_queue;
 	struct sk_buff *skb;
 	unsigned received = 0;
 
-	/* FIXME: use skb_queue_splice_tail_init */
-	while (received < budget &&
-	       (skb = skb_dequeue(&tfile->socket.sk->sk_write_queue))
-		!= NULL) {
+	while (1) {
+		while ((skb = __skb_dequeue(&tfile->process_queue))) {
 			netif_receive_skb(skb);
-			++received;
+			if (++received >= budget)
+				return received;
+		}
+
+		spin_lock(&input_queue->lock);
+		if (skb_queue_empty(input_queue)) {
+			spin_unlock(&input_queue->lock);
+			break;
+		}
+		skb_queue_splice_tail_init(input_queue, &tfile->process_queue);
+		spin_unlock(&input_queue->lock);
 	}
 
 	if (received < budget) {
@@ -2320,6 +2333,8 @@ static int tun_chr_open(struct inode *inode, struct file * file)
 	file->private_data = tfile;
 	INIT_LIST_HEAD(&tfile->next);
 
+	skb_queue_head_init(&tfile->process_queue);
+
 	sock_set_flag(&tfile->sk, SOCK_ZEROCOPY);
 
 	return 0;
