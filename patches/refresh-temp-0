Bottom: ae736c374725c2c2ef1ee2e01ba44a1dd7026a30
Top:    7d6f9a0e991202e91ad6de5c5bdb7d4c0396d022
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-06-11 14:51:25 +0800

Refresh of vhost_net-use-rxq-s-timeout

---

diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index e7cf7d2..8ccd458 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -648,10 +648,11 @@ static int vhost_net_rx_peek_head_len(struct vhost_net *net, struct sock *sk)
 	struct vhost_net_virtqueue *rvq = &net->vqs[VHOST_NET_VQ_RX];
 	struct vhost_net_virtqueue *nvq = &net->vqs[VHOST_NET_VQ_TX];
 	struct vhost_virtqueue *vq = &nvq->vq;
+	struct vhost_virtqueue *rq = &rvq->vq;
 	unsigned long uninitialized_var(endtime);
 	int len = peek_head_len(rvq, sk);
 
-	if (!len && vq->busyloop_timeout) {
+	if (!len && rq->busyloop_timeout) {
 		/* Flush batched heads first */
 		vhost_rx_signal_used(rvq);
 		/* Both tx vq and rx socket were polled here */
@@ -659,7 +660,7 @@ static int vhost_net_rx_peek_head_len(struct vhost_net *net, struct sock *sk)
 		vhost_disable_notify(&net->dev, vq);
 
 		preempt_disable();
-		endtime = busy_clock() + vq->busyloop_timeout;
+		endtime = busy_clock() + rq->busyloop_timeout;
 
 		while (vhost_can_busy_poll(&net->dev, endtime) &&
 		       !sk_has_rx_data(sk) &&
