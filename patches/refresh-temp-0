Bottom: a55b081d03bca57d70c4c66dbda7edd2777dbf05
Top:    bebbb235cd4415f124610333696382b3b9ad9ab0
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-09-22 11:48:20 +0800

Refresh of introduce-core-ring

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index f6d09f3..131bf05 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -75,6 +75,7 @@
 #include <linux/skb_array.h>
 #include <linux/bpf.h>
 #include <linux/bpf_trace.h>
+#include <linux/core_ring.h>
 
 #include <linux/uaccess.h>
 
diff --git a/include/linux/core_ring.h b/include/linux/core_ring.h
index 45c9d35..6ff0d0d 100644
--- a/include/linux/core_ring.h
+++ b/include/linux/core_ring.h
@@ -48,7 +48,7 @@ struct core_ring {
 	/* Read-only by both the producer and the consumer */
 	int size ____cacheline_aligned_in_smp; /* max entries in queue */
 	int entry_size; /* size of entry */
-	ring_addr_fn_t seek_fn;
+	ring_seek_fn_t seek_fn;
 	ring_zero_fn_t zero_fn;
 	ring_valid_fn_t valid_fn;
 	ring_copy_fn_t copy_fn;
@@ -62,7 +62,7 @@ struct core_ring {
  */
 static inline bool __core_ring_full(struct core_ring *r)
 {
-	return r->valid_fn(r, producer);
+	return r->valid_fn(r, r->producer);
 }
 
 static inline bool core_ring_full(struct core_ring *r)
@@ -118,7 +118,7 @@ static inline int __core_ring_produce(struct core_ring *r, void *ptr)
 	if (unlikely(!r->size) || r->valid_fn(r, r->producer))
 		return -ENOSPC;
 
-	r->copy_fn(r, r->seek_fn(r, producer), ptr);
+	r->copy_fn(r, r->seek_fn(r, r->producer), ptr);
 	r->producer++;
 	if (unlikely(r->producer >= r->size))
 		r->producer = 0;
