Bottom: 293e49ac7312ff45637cf246fb9af47967e28e5e
Top:    e03e20e049aaf8ce504f5c2b83d4e0b2c8d731b9
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-02-07 10:32:01 +0800

Refresh of vhost-support-for-packed-ring

---

diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index 5727b18..854e4ae 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -1148,6 +1148,14 @@ static int vhost_iotlb_miss(struct vhost_virtqueue *vq, u64 iova, int access)
 	return 0;
 }
 
+static int vq_packed_access_ok(struct vhost_virtqueue *vq,
+			       unsigned int num,
+			       struct vring_packed __user *packed)
+{
+	return access_ok(VERIFY_READ, packed, num * sizeof *packed) &&
+	       access_ok(VERIFY_WRITE, packed, num * sizeof *packed);
+}
+
 static int vq_access_ok(struct vhost_virtqueue *vq, unsigned int num,
 			struct vring_desc __user *desc,
 			struct vring_avail __user *avail,
@@ -1359,6 +1367,7 @@ long vhost_vring_ioctl(struct vhost_dev *d, int ioctl, void __user *argp)
 	struct vhost_vring_state s;
 	struct vhost_vring_file f;
 	struct vhost_vring_addr a;
+	struct vhost_vring_packed_addr p;
 	u32 idx;
 	long r;
 
@@ -1471,6 +1480,37 @@ long vhost_vring_ioctl(struct vhost_dev *d, int ioctl, void __user *argp)
 		vq->log_addr = a.log_guest_addr;
 		vq->used = (void __user *)(unsigned long)a.used_user_addr;
 		break;
+	case VHOST_SET_VRING_PACKED_ADDR:
+		if (copy_from_user(&p, argp, sizeof p)) {
+			r = -EFAULT;
+			break;
+		}
+		if (p.flags & ~(0x1 << VHOST_VRING_F_LOG)) {
+			r = -EOPNOTSUPP;
+			break;
+		}
+		/* We only verify access here if backend is configured.
+		 * If it is not, we don't as size might not have been setup.
+		 * We will verify when backend is configured. */
+		if (vq->private_data) {
+			if (!vq_packed_access_ok(vq, vq->num,
+						 (void __user *)(unsigned long)
+						 p.packed_user_addr)) {
+				r = -EINVAL;
+				break;
+			}
+
+			/* Also validate log access for desc ring if enabled. */
+			if ((a.flags & (0x1 << VHOST_VRING_F_LOG)) &&
+			    !log_access_ok(vq->log_base, p.log_guest_addr,
+					   vq->num * sizeof *vq->packed)) {
+				r = -EINVAL;
+				break;
+			}
+		}
+
+		vq->log_used = !!(p.flags & (0x1 << VHOST_VRING_F_LOG));
+		break;
 	case VHOST_SET_VRING_KICK:
 		if (copy_from_user(&f, argp, sizeof f)) {
 			r = -EFAULT;
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index 79c6e7a..c847496 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -94,6 +94,7 @@ struct vhost_virtqueue {
 	struct vring_desc __user *desc;
 	struct vring_avail __user *avail;
 	struct vring_used __user *used;
+	struct vring_packed __user *packed;
 	const struct vhost_umem_node *meta_iotlb[VHOST_NUM_ADDRS];
 	struct file *kick;
 	struct file *call;
diff --git a/include/uapi/linux/vhost.h b/include/uapi/linux/vhost.h
index c51f8e5..93e975c 100644
--- a/include/uapi/linux/vhost.h
+++ b/include/uapi/linux/vhost.h
@@ -48,6 +48,16 @@ struct vhost_vring_addr {
 	__u64 log_guest_addr;
 };
 
+struct vhost_vring_packed_addr {
+	unsigned int index;
+	/* Flag values: */
+	/* Whether log address is valid. If set enables logging. */
+#define VHOST_VRING_F_LOG 0
+	unsigned int flags;
+	__u64 desc_user_addr;
+	__u64 log_guest_addr;
+};
+
 /* no alignment requirement */
 struct vhost_iotlb_msg {
 	__u64 iova;
@@ -159,6 +169,9 @@ struct vhost_memory {
 /* Get busy loop timeout (in us) */
 #define VHOST_GET_VRING_BUSYLOOP_TIMEOUT _IOW(VHOST_VIRTIO, 0x24,	\
 					 struct vhost_vring_state)
+/* Set addresses for the packed ring */
+#define VHOST_SET_VRING_PACKED_ADDR _IOW(VHOST_VIRTIO, 0x25,		\
+				    struct vhost_vring_packed_addr)
 
 /* VHOST_NET specific defines */
