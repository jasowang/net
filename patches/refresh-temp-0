Bottom: ddaf89b30f0811e14090dfbc141d9c760fa73891
Top:    f10ff6f9972da1c57b4cf82c6ba9ea5d15b357c6
Author: Jason Wang <jasowang@redhat.com>
Date:   2016-06-15 10:00:32 +0800

Refresh of refresh-of-tuntap-introduce-tx

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index d06ab7e..8e49d97 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -1711,7 +1711,7 @@ out:
 	return ret;
 }
 
-static int tun_peek(struct socket *sock)
+static int tun_peek_len(struct socket *sock)
 {
 	struct tun_file *tfile = container_of(sock, struct tun_file, socket);
 	struct sock *sk = sock->sk;
@@ -1743,7 +1743,7 @@ static int tun_peek(struct socket *sock)
 
 /* Ops structure to mimic raw sockets with tun */
 static const struct proto_ops tun_socket_ops = {
-	.peek    = tun_peek,
+	.peek_len = tun_peek_len,
 	.sendmsg = tun_sendmsg,
 	.recvmsg = tun_recvmsg,
 };
diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index 10ff494..236ba52 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -460,8 +460,8 @@ static int peek_head_len(struct sock *sk)
 	int len = 0;
 	unsigned long flags;
 
-	if (sock->ops->peek)
-		return sock->ops->peek(sock, true);
+	if (sock->ops->peek_len)
+		return sock->ops->peek_len(sock);
 
 	spin_lock_irqsave(&sk->sk_receive_queue.lock, flags);
 	head = skb_peek(&sk->sk_receive_queue);
@@ -479,8 +479,8 @@ static int sk_has_rx_data(struct sock *sk)
 {
 	struct socket *sock = sk->sk_socket;
 
-	if (sock->ops->peek)
-		return sock->ops->peek(sock, false);
+	if (sock->ops->peek_len)
+		return sock->ops->peek_len(sock);
 
 	return skb_queue_empty(&sk->sk_receive_queue);
 }
diff --git a/include/linux/net.h b/include/linux/net.h
index 18dbb61..af94770 100644
--- a/include/linux/net.h
+++ b/include/linux/net.h
@@ -132,7 +132,6 @@ struct module;
 struct proto_ops {
 	int		family;
 	struct module	*owner;
-	int		(*peek) (struct socket *sock, bool exact);
 	int		(*release)   (struct socket *sock);
 	int		(*bind)	     (struct socket *sock,
 				      struct sockaddr *myaddr,
@@ -186,6 +185,7 @@ struct proto_ops {
 	ssize_t 	(*splice_read)(struct socket *sock,  loff_t *ppos,
 				       struct pipe_inode_info *pipe, size_t len, unsigned int flags);
 	int		(*set_peek_off)(struct sock *sk, int val);
+        int		(*peek_len) (struct socket *sock);
 };
 
 #define DECLARE_SOCKADDR(type, dst, src)	\
