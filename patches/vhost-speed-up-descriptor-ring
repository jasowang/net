Bottom: c6b8acb4c91fe4fb0fafca5cfd73b71b3b474710
Top:    c60b6d50cf4943dfece48059fefc90720891f8bd
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-09-08 13:26:11 +0800

vhost: speed up descriptor ring access

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index 43f571e..426eb7d 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -1466,6 +1466,14 @@ long vhost_vring_ioctl(struct vhost_dev *d, int ioctl, void __user *argp)
 		vq->avail = (void __user *)(unsigned long)a.avail_user_addr;
 		vq->log_addr = a.log_guest_addr;
 		vq->used = (void __user *)(unsigned long)a.used_user_addr;
+
+		r = get_user_pages_fast((unsigned long)a.desc_user_addr,
+					1, 1, &vq->page_desc);
+		if (r < 0)
+			return -EFAULT;
+		BUG_ON(r != 1);
+		vq->desc_vaddr = vmap(&vq->page_desc, 1, VM_MAP, PAGE_KERNEL);
+
 		break;
 	case VHOST_SET_VRING_KICK:
 		if (copy_from_user(&f, argp, sizeof f)) {
@@ -2045,7 +2053,8 @@ int __vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			struct vhost_log *log, unsigned int *log_num,
 			__virtio16 head)
 {
-	struct vring_desc desc;
+	struct vring_desc *desc;
+	struct vring_desc desc2;
 	unsigned int i, found = 0;
 	int ret = 0, access;
 
@@ -2075,17 +2084,20 @@ int __vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			       i, vq->num, head);
 			return -EINVAL;
 		}
-		ret = vhost_copy_from_user(vq, &desc, vq->desc + i,
+#if 0
+		ret = vhost_copy_from_user(vq, &desc2, vq->desc + i,
 					   sizeof desc);
 		if (unlikely(ret)) {
 			vq_err(vq, "Failed to get descriptor: idx %d addr %p\n",
 			       i, vq->desc + i);
 			return -EFAULT;
 		}
-		if (desc.flags & cpu_to_vhost16(vq, VRING_DESC_F_INDIRECT)) {
+#endif
+		desc = vq->desc_vaddr + i;
+		if (desc->flags & cpu_to_vhost16(vq, VRING_DESC_F_INDIRECT)) {
 			ret = get_indirect(vq, iov, iov_size,
 					   out_num, in_num,
-					   log, log_num, &desc);
+					   log, log_num, desc);
 			if (unlikely(ret < 0)) {
 				if (ret != -EAGAIN)
 					vq_err(vq, "Failure detected "
@@ -2095,12 +2107,12 @@ int __vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			continue;
 		}
 
-		if (desc.flags & cpu_to_vhost16(vq, VRING_DESC_F_WRITE))
+		if (desc->flags & cpu_to_vhost16(vq, VRING_DESC_F_WRITE))
 			access = VHOST_ACCESS_WO;
 		else
 			access = VHOST_ACCESS_RO;
-		ret = translate_desc(vq, vhost64_to_cpu(vq, desc.addr),
-				     vhost32_to_cpu(vq, desc.len), iov + iov_count,
+		ret = translate_desc(vq, vhost64_to_cpu(vq, desc->addr),
+				     vhost32_to_cpu(vq, desc->len), iov + iov_count,
 				     iov_size - iov_count, access);
 		if (unlikely(ret < 0)) {
 			if (ret != -EAGAIN)
@@ -2113,8 +2125,8 @@ int __vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			 * increment that count. */
 			*in_num += ret;
 			if (unlikely(log)) {
-				log[*log_num].addr = vhost64_to_cpu(vq, desc.addr);
-				log[*log_num].len = vhost32_to_cpu(vq, desc.len);
+				log[*log_num].addr = vhost64_to_cpu(vq, desc->addr);
+				log[*log_num].len = vhost32_to_cpu(vq, desc->len);
 				++*log_num;
 			}
 		} else {
@@ -2127,7 +2139,7 @@ int __vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			}
 			*out_num += ret;
 		}
-	} while ((i = next_desc(vq, &desc)) != -1);
+	} while ((i = next_desc(vq, desc)) != -1);
 
 	/* On success, increment avail index. */
 	vq->last_avail_idx++;
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index a351820..b358802 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -149,6 +149,8 @@ struct vhost_virtqueue {
 	bool user_be;
 #endif
 	u32 busyloop_timeout;
+	struct page *page_desc;
+	struct vring_desc *desc_vaddr;
 };
 
 struct vhost_msg_node {
