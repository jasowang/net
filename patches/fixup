Bottom: 320ae0db90b98660cc443980e88fcb576f39d8b7
Top:    92ad9ea050c5e7fb7acd8def6629c38ee99faa0c
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-02-16 20:28:07 +0800



Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 32c1e84..0e478f3 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -414,6 +414,11 @@ static bool virtnet_xdp_xmit(struct virtnet_info *vi,
 	return true;
 }
 
+static unsigned int virtnet_get_headroom(struct virtnet_info *vi)
+{
+	return vi->xdp_queue_pairs ? VIRTIO_XDP_HEADROOM : 0;
+}
+
 static struct sk_buff *receive_small(struct net_device *dev,
 				     struct virtnet_info *vi,
 				     struct receive_queue *rq,
@@ -421,6 +426,10 @@ static struct sk_buff *receive_small(struct net_device *dev,
 {
 	struct sk_buff * skb = buf;
 	struct bpf_prog *xdp_prog;
+	unsigned int headroom = vi->hdr_len + NET_IP_ALIGN +
+		                virtnet_get_headroom(vi);
+	unsigned int buflen = SKB_DATA_ALIGN(GOOD_PACKET_LEN + headroom) +
+		              SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 
 	len -= vi->hdr_len;
 
@@ -460,8 +469,10 @@ static struct sk_buff *receive_small(struct net_device *dev,
 	}
 	rcu_read_unlock();
 
-	skb = build_skb(buf + vi->hdr_len, GOOD_PACKET_LEN);
+	skb = build_skb(buf, buflen);
+	skb_reserve(skb, headroom);
 	skb_put(skb, len);
+	buf += NET_IP_ALIGN + virtnet_get_headroom(vi);
 	memcpy(skb_vnet_hdr(skb), buf, vi->hdr_len);
 
 	return skb;
@@ -791,11 +802,6 @@ static void receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
 	dev_kfree_skb(skb);
 }
 
-static unsigned int virtnet_get_headroom(struct virtnet_info *vi)
-{
-	return vi->xdp_queue_pairs ? VIRTIO_XDP_HEADROOM : 0;
-}
-
 static int add_recvbuf_small(struct virtnet_info *vi, struct receive_queue *rq,
 			     gfp_t gfp)
 {
@@ -812,9 +818,8 @@ static int add_recvbuf_small(struct virtnet_info *vi, struct receive_queue *rq,
 		return -ENOMEM;
 
 	buf = (char *)page_address(alloc_frag->page) + alloc_frag->offset;
-	buf += NET_IP_ALIGN + xdp_headroom;
 	get_page(alloc_frag->page);
-	sg_init_one(rq->sg, buf, GOOD_PACKET_LEN);
+	sg_init_one(rq->sg, buf + NET_IP_ALIGN + xdp_headroom, GOOD_PACKET_LEN);
 	err = virtqueue_add_inbuf(rq->vq, rq->sg, 1, buf, gfp);
 	if (err < 0)
 		put_page(virt_to_head_page(buf));
