Bottom: 7cbc22b9a89fe41103e6a61a52b7f9c71ef5ba43
Top:    2597e576f584e2171b6b31f34421d2ce94fb49cc
Author: Jason Wang <jasowang@redhat.com>
Date:   2016-12-16 15:27:59 +0800

XDP: introduce xdp free func

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/drivers/net/ethernet/mellanox/mlx4/en_rx.c b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
index 3c37e216b..2264da0 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
@@ -783,6 +783,14 @@ static int check_csum(struct mlx4_cqe *cqe, struct sk_buff *skb, void *va,
 	return 0;
 }
 
+int mlx4_en_xdp_buff_free(const void *r, const void *data)
+{
+	struct mlx4_en_rx_ring *ring = r;
+	struct mlx4_en_rx_alloc *frags = data;
+
+	return mlx4_en_rx_recycle(ring, frags);
+}
+
 int mlx4_en_process_rx_cq(struct net_device *dev, struct mlx4_en_cq *cq, int budget)
 {
 	struct mlx4_en_priv *priv = netdev_priv(dev);
@@ -902,6 +910,10 @@ int mlx4_en_process_rx_cq(struct net_device *dev, struct mlx4_en_cq *cq, int bud
 			xdp.data = xdp.data_hard_start + frags[0].page_offset;
 			xdp.data_end = xdp.data + length;
 			orig_data = xdp.data;
+			xdp.data = ring;
+			xdp.private = private;
+			xdp.free = mlx4_en_xdp_buff_free;
+			xdp.netdev = dev;
 
 			act = bpf_prog_run_xdp(xdp_prog, &xdp);
 
diff --git a/include/linux/filter.h b/include/linux/filter.h
index 7023142..74e504a 100644
--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -439,8 +439,29 @@ struct xdp_buff {
 	void *data;
 	void *data_end;
 	void *data_hard_start;
+	void *ring;
+	void *private;
+	struct net_device *dev;
+	int (*free) (const void *ring, const void *private);
 };
 
+static inline int xdp_buff_free(struct xdp_buff *xdp_buff)
+{
+	return xdp_buff->free(xdp_buff->ring, xdp_buff->private);
+}
+
+static inline void xdp_buff_init(struct xdp_buff *xdp_buff,
+                                 void *data, void *data_end,
+                                 void *ring, void *private,
+                                 void *free)
+{
+	xdp_buff->data = data;
+	xdp_buff->data_end = data_end;
+	xdp_buff->ring = ring;
+	xdp_buff->private = private;
+	xdp_buff->free = free;
+}
+
 /* compute the linear packet data range [data, data_end) which
  * will be accessed by cls_bpf, act_bpf and lwt programs
  */
