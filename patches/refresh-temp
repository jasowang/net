Bottom: 340667c71c3f64b4edca51ee0830b58e9931db94
Top:    e663b7f2531a02d7ffcfc685a0e2d042a6f6c2c1
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-02-14 13:13:37 +0800

Refresh of virtio-net-batch-stats

---

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 7c20ebf..65d0373 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -719,13 +719,13 @@ static struct sk_buff *receive_mergeable(struct net_device *dev,
 	return NULL;
 }
 
-static void receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
-			void *buf, unsigned int len,
-			unsigned int *packets, unsigned int *bytes)
+static int receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
+		       void *buf, unsigned int len)
 {
 	struct net_device *dev = vi->dev;
 	struct sk_buff *skb;
 	struct virtio_net_hdr_mrg_rxbuf *hdr;
+	int ret;
 
 	if (unlikely(len < vi->hdr_len + ETH_HLEN)) {
 		pr_debug("%s: short packet %i\n", dev->name, len);
@@ -739,7 +739,7 @@ static void receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
 		} else {
 			dev_kfree_skb(buf);
 		}
-		return;
+		return 0;
 	}
 
 	if (vi->mergeable_rx_bufs)
@@ -750,12 +750,11 @@ static void receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
 		skb = receive_small(dev, vi, rq, buf, len);
 
 	if (unlikely(!skb))
-		return;
+		return 0;
 
 	hdr = skb_vnet_hdr(skb);
 
-	*packets += 1;
-	*bytes += skb->len;
+	ret = skb->len;
 
 	if (hdr->hdr.flags & VIRTIO_NET_HDR_F_DATA_VALID)
 		skb->ip_summed = CHECKSUM_UNNECESSARY;
@@ -773,11 +772,12 @@ static void receive_buf(struct virtnet_info *vi, struct receive_queue *rq,
 		 ntohs(skb->protocol), skb->len, skb->pkt_type);
 
 	napi_gro_receive(&rq->napi, skb);
-	return;
+	return ret;
 
 frame_err:
 	dev->stats.rx_frame_errors++;
 	dev_kfree_skb(skb);
+	return 0;
 }
 
 static unsigned int virtnet_get_headroom(struct virtnet_info *vi)
@@ -992,15 +992,13 @@ static void refill_work(struct work_struct *work)
 static int virtnet_receive(struct receive_queue *rq, int budget)
 {
 	struct virtnet_info *vi = rq->vq->vdev->priv;
-	unsigned int len, received = 0;
+	unsigned int len, received = 0, bytes = 0;
 	void *buf;
-	unsigned int packets = 0;
-	unsigned int bytes = 0;
 	struct virtnet_stats *stats = this_cpu_ptr(vi->stats);
 
 	while (received < budget &&
 	       (buf = virtqueue_get_buf(rq->vq, &len)) != NULL) {
-		receive_buf(vi, rq, buf, len, &packets, &bytes);
+		bytes += receive_buf(vi, rq, buf, len);
 		received++;
 	}
 
@@ -1011,7 +1009,7 @@ static int virtnet_receive(struct receive_queue *rq, int budget)
 
 	u64_stats_update_begin(&stats->rx_syncp);
 	stats->rx_bytes += bytes;
-	stats->rx_packets += packets;
+	stats->rx_packets += received;
 	u64_stats_update_end(&stats->rx_syncp);
 
 	return received;
