Bottom: bf3ba9198c61d554b4448473dc944fb2857fd7b0
Top:    b6a1359aab318e6d33751433d2e8408868553468
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-04-23 17:02:41 +0800

Refresh of vhost_net-build-skb-and-xdp

---

diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index be3c1b9..1584dbf 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -456,9 +456,9 @@ static bool vhost_exceeds_maxpend(struct vhost_net *net)
 #define VHOST_NET_HEADROOM 256
 #define VHOST_NET_RX_PAD (NET_IP_ALIGN + NET_SKB_PAD)
 
-static struct sk_buff *vhost_net_build_pkt(struct vhost_virtqueue *nvq,
-					   struct iov_iter *from,
-					   struct xdp_buff *xdp)
+static int vhost_net_build_pkt(struct vhost_virtqueue *nvq,
+			       struct iov_iter *from,
+			       struct xdp_buff *xdp)
 {
 	struct vhost_virtqueue *vq = &nvq->vq;
 	struct page_frag *alloc_frag = &current->task_frag;
@@ -469,12 +469,12 @@ static struct sk_buff *vhost_net_build_pkt(struct vhost_virtqueue *nvq,
 	void *ret;
 
 	if (len < nvq->sock_hlen)
-		return ERR_PTR(-EFAULT);
+		return -EFAULT;
 
 	len -= nvq->sock_hlen;
 
 	if (!copy_from_iter_full(&gso, sizeof(gso), from))
-		return ERR_PTR(-EFAULT);
+		return -EFAULT;
 
 	if ((gso.flags & VIRTIO_NET_HDR_F_NEEDS_CSUM) &&
 	    vhost16_to_cpu(&vq->vq, gso.csum_start) +
@@ -491,31 +491,23 @@ static struct sk_buff *vhost_net_build_pkt(struct vhost_virtqueue *nvq,
 
 	if (SKB_DATA_ALIGN(len + pad) +
 	    SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) > PAGE_SIZE)
-		return NULL;
+		return -ENOSPC;
 
 	buflen += SKB_DATA_ALIGN(len + pad);
 	alloc_frag->offset = ALIGN((u64)alloc_frag->offset, SMP_CACHE_BYTES);
 	if (unlikely(!skb_page_frag_refill(buflen, alloc_frag, GFP_KERNEL)))
-		return ERR_PTR(-ENOMEM);
+		return -ENOMEM;
 
 	buf = (char *)page_address(alloc_frag->page) + alloc_frag->offset;
 	copied = copy_page_from_iter(alloc_frag->page,
 				     alloc_frag->offset + pad,
 				     len, from);
 	if (copied != len)
-		return ERR_PTR(-EFAULT);
+		return -EFAULT;
 
 	/* GSO packet, build skb */
 	if (gso.gso_type) {
-		ret = build_skb(buf, buf_len);
-		if (!skb)
-			return ERR_PTR(-ENOMEM);
-		skb_reserve(skb, pad);
-		skb_put(skb, len);
-		get_page(alloc_frag->page);
-		alloc_frag->offset += buflen;
-
-		return ret;
+		return -EINVAL;
 	}
 
 	xdp->data_hard_start = buf;
@@ -524,7 +516,10 @@ static struct sk_buff *vhost_net_build_pkt(struct vhost_virtqueue *nvq,
 	xdp.data_end = xdp.data + len;
 	*(int *)xdp.data_hard_start = buflen;
 
-	return NULL;
+	get_page(alloc_frag->page);
+	alloc_frag->offset += buflen;
+
+	return 0;
 }
 
 /* Expects to be always run from workqueue - which acts as
