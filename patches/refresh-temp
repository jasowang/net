Bottom: f3b2a3904ca6b2f5fe46e82a728d81906286df25
Top:    65af9804cd407089b80815764d118749d21400f1
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-07-26 11:04:16 +0800

Refresh of tun-xdp-support

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index ec3a565..0407271 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -1270,11 +1270,9 @@ static void tun_rx_batched(struct tun_struct *tun, struct tun_file *tfile,
 static void tun_xdp_xmit(struct tun_struct *tun, struct tun_file *tfile,
 			 struct sk_buff *skb)
 {
-	skb->queue_mapping = tfile->queue_index;
-	skb->protocol = eth_type_trans(skb, tun->dev);
-	local_bh_disable();
-	tun_net_xmit(skb, tun->dev);
-	local_bh_enable();
+	skb->dev = tun->dev;
+	dev_queue_xmit(skb);
+
 	return;
 }
 
@@ -1349,6 +1347,12 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
 	get_page(alloc_frag->page);
 	alloc_frag->offset += buflen;
 
+	if (virtio_net_hdr_to_skb(skb, hdr, tun_is_little_endian(tun))) {
+		this_cpu_inc(tun->pcpu_stats->rx_frame_errors);
+		kfree_skb(skb);
+		return ERR_PTR(-EINVAL);
+	}
+
 	if (xdp_xmit) {
 		tun_xdp_xmit(tun, tfile, skb);
 		return NULL;
@@ -1357,7 +1361,6 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
 	if (generic_xdp) {
 		int ret;
 
-		/* FIXME: hdr conversion and other stuffs */
 		rcu_read_lock();
 		ret = do_xdp_generic(rcu_dereference(tfile->xdp_prog), skb);
 		rcu_read_unlock();
@@ -1366,6 +1369,8 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
 			return NULL;
 	}
 
+	printk("build: data - head %d\n", skb->data - skb->head);
+
 	return skb;
 
 err_xdp:
@@ -1447,7 +1452,7 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
 			zerocopy = true;
 	}
 
-	/* FIXME: check DONTWAIT and INT_MAX */
+	/* FIXME: check IFF_TAP, DONTWAIT and INT_MAX */
 	if (SKB_DATA_ALIGN(len + TUN_RX_PAD) +
 	    SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) < PAGE_SIZE) {
 		skb = tun_build_skb(tun, tfile, from, &gso, len);
@@ -1490,6 +1495,7 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
 		kfree_skb(skb);
 		return -EINVAL;
 	}
+	printk("4:data - head %d\n", skb->data - skb->head);
 
 	switch (tun->flags & TUN_TYPE_MASK) {
 	case IFF_TUN:
@@ -1516,6 +1522,7 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
 		skb->protocol = eth_type_trans(skb, tun->dev);
 		break;
 	}
+	printk("3:data - head %d\n", skb->data - skb->head);
 
 	/* copy skb_ubuf_info for callback when skb has no error */
 	if (zerocopy) {
@@ -1527,9 +1534,12 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
 		uarg->callback(uarg, false);
 	}
 
+	printk("2: data - head %d\n", skb->data - skb->head);
+
 	skb_reset_network_header(skb);
 	skb_probe_transport_header(skb, 0);
 
+	printk("data - head %d\n", skb->data - skb->head);
 	rxhash = __skb_get_hash_symmetric(skb);
 #ifndef CONFIG_4KSTACKS
 	tun_rx_batched(tun, tfile, skb, more);
