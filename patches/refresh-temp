Bottom: 03c928eba2b89cf21982ff56c6926a4c4f69ee26
Top:    f0cabc73323e8ad9fc5fa59d9ea329ea5eacc1f3
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-07-20 13:14:28 +0800

Refresh of debug-XDP_PASS

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index bc7cebf..bf0f5bb 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -2452,6 +2452,7 @@ static int tun_xdp_one(struct tun_struct *tun,
 	skb = build_skb(xdp->data_hard_start, buflen);
 	if (!skb) {
 		err = -ENOMEM;
+		printk("build skb error!\n");
 		goto out;
 	}
 
@@ -2461,6 +2462,7 @@ static int tun_xdp_one(struct tun_struct *tun,
 			goto out;
 	}
 
+	printk("XDP_PASS!\n");
 	skb_reserve(skb, xdp->data - xdp->data_hard_start);
 	skb_put(skb, xdp->data_end - xdp->data);
 
@@ -2468,6 +2470,7 @@ static int tun_xdp_one(struct tun_struct *tun,
 		this_cpu_inc(tun->pcpu_stats->rx_frame_errors);
 		kfree_skb(skb);
 		err = -EINVAL;
+		printk("virtio_net_hdr_to_skb error!\n");
 		goto out;
 	}
 
@@ -2478,6 +2481,7 @@ static int tun_xdp_one(struct tun_struct *tun,
 	if (!rcu_dereference(tun->steering_prog))
 		rxhash = __skb_get_hash_symmetric(skb);
 
+	printk("skb receive!\n");
 	netif_receive_skb(skb);
 
 	stats = get_cpu_ptr(tun->pcpu_stats);
diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index b4bbed4..93f9cda 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -447,10 +447,35 @@ static void vhost_net_signal_used(struct vhost_net_virtqueue *nvq)
 	nvq->done_idx = 0;
 }
 
+static void vhost_tx_batch(struct vhost_net *net,
+			   struct vhost_net_virtqueue *nvq,
+			   struct socket *sock,
+			   struct msghdr *msghdr)
+{
+	struct tun_msg_ctl ctl = {
+		.type = nvq->done_idx << 16 | TUN_MSG_PTR,
+		.ptr = nvq->xdp,
+	};
+	int err;
+
+	if (nvq->done_idx == 0)
+		return;
+
+	printk("batch %d\n", nvq->done_idx);
+	msghdr->msg_control = &ctl;
+	err = sock->ops->sendmsg(sock, msghdr, 0);
+	if (unlikely(err < 0)) {
+		vq_err(&nvq->vq, "Fail to batch sending packets\n");
+		return;
+	}
+
+	vhost_net_signal_used(nvq);
+}
+
 static int vhost_net_tx_get_vq_desc(struct vhost_net *net,
 				    struct vhost_net_virtqueue *nvq,
 				    unsigned int *out_num, unsigned int *in_num,
-				    bool *busyloop_intr)
+				    struct msghdr *msg, bool *busyloop_intr)
 {
 	struct vhost_virtqueue *vq = &nvq->vq;
 	unsigned long uninitialized_var(endtime);
@@ -458,8 +483,9 @@ static int vhost_net_tx_get_vq_desc(struct vhost_net *net,
 				  out_num, in_num, NULL, NULL);
 
 	if (r == vq->num && vq->busyloop_timeout) {
+		/* Flush batched packets first */
 		if (!vhost_sock_zcopy(vq->private_data))
-			vhost_net_signal_used(nvq);
+			vhost_tx_batch(net, nvq, vq->private_data, msg);
 		preempt_disable();
 		endtime = busy_clock() + vq->busyloop_timeout;
 		while (vhost_can_busy_poll(endtime)) {
@@ -515,7 +541,7 @@ static int get_tx_bufs(struct vhost_net *net,
 	struct vhost_virtqueue *vq = &nvq->vq;
 	int ret;
 
-	ret = vhost_net_tx_get_vq_desc(net, nvq, out, in, busyloop_intr);
+	ret = vhost_net_tx_get_vq_desc(net, nvq, out, in, msg, busyloop_intr);
 
 	if (ret < 0 || ret == vq->num)
 		return ret;
@@ -618,30 +644,6 @@ static int vhost_net_build_xdp(struct vhost_net_virtqueue *nvq,
 	return 0;
 }
 
-static void vhost_tx_batch(struct vhost_net *net,
-			   struct vhost_net_virtqueue *nvq,
-			   struct socket *sock,
-			   struct msghdr *msghdr)
-{
-	struct tun_msg_ctl ctl = {
-		.type = nvq->done_idx << 16 | TUN_MSG_PTR,
-		.ptr = nvq->xdp,
-	};
-	int err;
-
-	if (nvq->done_idx == 0)
-		return;
-
-	msghdr->msg_control = &ctl;
-	err = sock->ops->sendmsg(sock, msghdr, 0);
-	if (unlikely(err < 0)) {
-		vq_err(&nvq->vq, "Fail to batch sending packets\n");
-		return;
-	}
-
-	vhost_net_signal_used(nvq);
-}
-
 static void handle_tx_copy(struct vhost_net *net, struct socket *sock)
 {
 	struct vhost_net_virtqueue *nvq = &net->vqs[VHOST_NET_VQ_TX];
@@ -659,14 +661,18 @@ static void handle_tx_copy(struct vhost_net *net, struct socket *sock)
 	int err;
 	int sent_pkts = 0;
 
+	printk("handle_tx!\n");
+
 	for (;;) {
 		bool busyloop_intr = false;
 
 		head = get_tx_bufs(net, nvq, &msg, &out, &in, &len,
 				   &busyloop_intr);
 		/* On error, stop handling until the next kick. */
-		if (unlikely(head < 0))
+		if (unlikely(head < 0)) {
+			printk("head < 0\n");
 			break;
+		}
 		/* Nothing new?  Wait for eventfd to tell us they refilled. */
 		if (head == vq->num) {
 			if (unlikely(busyloop_intr)) {
@@ -675,18 +681,23 @@ static void handle_tx_copy(struct vhost_net *net, struct socket *sock)
 				vhost_disable_notify(&net->dev, vq);
 				continue;
 			}
+			printk("no new!\n");
 			break;
 		}
 
 		vq->heads[nvq->done_idx].id = cpu_to_vhost32(vq, head);
 		vq->heads[nvq->done_idx].len = 0;
+		printk("get a head %d\n", nvq->done_idx);
 		total_len += len;
 		err = vhost_net_build_xdp(nvq, &msg.msg_iter,
 					  &nvq->xdp[nvq->done_idx]);
 
 		if (!err) {
-			if (++nvq->done_idx == VHOST_NET_BATCH)
+			if (++nvq->done_idx == VHOST_NET_BATCH) {
+				printk("exceed flush!\n");
 				vhost_tx_batch(net, nvq, sock, &msg);
+			}
+			printk("batch to %d\n", nvq->done_idx);
 			goto done;
 		} else if (unlikely(err != -ENOSPC)) {
 			vq_err(vq, "Fail to build XDP buffer\n");
@@ -700,6 +711,7 @@ static void handle_tx_copy(struct vhost_net *net, struct socket *sock)
 		/* TODO: Check specific error and bomb out unless ENOBUFS? */
 		err = sock->ops->sendmsg(sock, &msg, len);
 		if (unlikely(err < 0)) {
+			printk("sendmsg error!\n");
 			vhost_discard_vq_desc(vq, 1);
 			vhost_net_enable_vq(net, vq);
 			break;
@@ -715,7 +727,7 @@ static void handle_tx_copy(struct vhost_net *net, struct socket *sock)
 		}
 	}
 
-	vhost_net_signal_used(nvq);
+	vhost_tx_batch(net, nvq, sock, &msg);
 }
 
 static void handle_tx_zerocopy(struct vhost_net *net, struct socket *sock)
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index 6c844b9..ad7e9187 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -219,7 +219,7 @@ ssize_t vhost_chr_write_iter(struct vhost_dev *dev,
 int vhost_init_device_iotlb(struct vhost_dev *d, bool enabled);
 
 #define vq_err(vq, fmt, ...) do {                                  \
-		pr_debug(pr_fmt(fmt), ##__VA_ARGS__);       \
+		printk(pr_fmt(fmt), ##__VA_ARGS__);       \
 		if ((vq)->error_ctx)                               \
 				eventfd_signal((vq)->error_ctx, 1);\
 	} while (0)
diff --git a/samples/bpf/xdp1_kern.c b/samples/bpf/xdp1_kern.c
index 2197421..9704b51 100644
--- a/samples/bpf/xdp1_kern.c
+++ b/samples/bpf/xdp1_kern.c
@@ -45,7 +45,7 @@ int xdp_prog1(struct xdp_md *ctx)
 	void *data_end = (void *)(long)ctx->data_end;
 	void *data = (void *)(long)ctx->data;
 	struct ethhdr *eth = data;
-	int rc = XDP_DROP;
+	int rc = XDP_PASS;
 	long *value;
 	u16 h_proto;
 	u64 nh_off;
