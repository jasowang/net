Bottom: 102fa9023c56c17508c1e93402ed71a566a29a2a
Top:    a1bf60811e6447a205d720501d2b3e52e777f1eb
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-06-12 14:30:09 +0800

Refresh of vhost-introduce-new-ioctls-to

---

diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index da00c94..2465c21 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -988,9 +988,11 @@ static int vhost_process_iotlb_msg(struct vhost_dev *dev,
 	case VHOST_IOTLB_UPDATE:
 		if (!dev->iotlb) {
 			ret = -EFAULT;
+			printk("no iotlb!\n");
 			break;
 		}
 		if (!umem_access_ok(msg->uaddr, msg->size, msg->perm)) {
+			printk("umem access fail!\n");
 			ret = -EFAULT;
 			break;
 		}
@@ -998,6 +1000,7 @@ static int vhost_process_iotlb_msg(struct vhost_dev *dev,
 		if (vhost_new_umem_range(dev->iotlb, msg->iova, msg->size,
 					 msg->iova + msg->size - 1,
 					 msg->uaddr, msg->perm)) {
+			printk("no memory!\n");
 			ret = -ENOMEM;
 			break;
 		}
@@ -1020,6 +1023,7 @@ static int vhost_process_iotlb_msg(struct vhost_dev *dev,
 	vhost_dev_unlock_vqs(dev);
 	mutex_unlock(&dev->mutex);
 
+	printk("ret is %d\n", ret);
 	return ret;
 }
 ssize_t vhost_chr_write_iter(struct vhost_dev *dev,
@@ -1036,6 +1040,7 @@ ssize_t vhost_chr_write_iter(struct vhost_dev *dev,
 	switch (type) {
 	case VHOST_IOTLB_MSG:
 		offset = offsetof(struct vhost_msg, iotlb) - sizeof(int);
+		printk("v1! offset is %d\n", offset);
 		break;
 	case VHOST_IOTLB_MSG_V2:
 		offset = sizeof(__u32);
@@ -1046,13 +1051,20 @@ ssize_t vhost_chr_write_iter(struct vhost_dev *dev,
 	}
 
 	iov_iter_advance(from, offset);
-	ret = copy_from_iter(&msg, from, sizeof(msg));
+	ret = copy_from_iter(&msg, sizeof(msg), from);
 	if (ret != sizeof(msg))
 		goto done;
-	if (vhost_process_iotlb_msg(dev, &msg))
+	printk("iova %llx size %llx uaddr %llx perm %llx type %d\n",
+		msg.iova, msg.size, msg.uaddr, msg.perm, msg.type);
+	if (vhost_process_iotlb_msg(dev, &msg)) {
 		ret = -EFAULT;
+		goto done;
+	}
 
+	ret = (type == VHOST_IOTLB_MSG) ? sizeof(struct vhost_msg) :
+		                          sizeof(struct vhost_msg_v2);
 done:
+	printk("ret in write %d\n", ret);
 	return ret;
 }
 EXPORT_SYMBOL(vhost_chr_write_iter);
@@ -1118,6 +1130,7 @@ ssize_t vhost_chr_read_iter(struct vhost_dev *dev, struct iov_iter *to,
 				kfree(node);
 				return ret;
 			}
+			printk("v2 read!\n");
 		} else {
 			ret = copy_to_iter(&node->msg, size, to);
 
@@ -1125,6 +1138,7 @@ ssize_t vhost_chr_read_iter(struct vhost_dev *dev, struct iov_iter *to,
 				kfree(node);
 				return ret;
 			}
+			printk("v1 read!\n");
 		}
 
 		vhost_enqueue_msg(dev, &dev->pending_list, node);
