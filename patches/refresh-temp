Bottom: 8e8fe4ff2dfc3d40ecbcaa31e6db320fc4ba7db1
Top:    d858d79d9de88971ee1cd58de0e3a17a4989f416
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-03-02 13:34:59 +0800

Refresh of vhost-prefetch-desc-indices

---

diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index 87a0141..dfc63dc 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -730,7 +730,7 @@ static void handle_rx(struct vhost_net *net)
 					break;
 				ndescs = vhost_prefetch_desc_indices(vq,
 								indices,
-								MIN(npkts, 64));
+								min(npkts, 64));
 				cur = 0;
 				if (!ndescs)
 					goto enable_notify;
diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index 06f3122..7fb69c0 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -1912,7 +1912,8 @@ static int get_indirect(struct vhost_virtqueue *vq,
 int vhost_prefetch_desc_indices(struct vhost_virtqueue *vq,
 				__virtio16 *indices, int num)
 {
-	u16 last_avail_idx, total;
+	int ret;
+	u16 last_avail_idx, total, left;
 	__virtio16 avail_idx;
 
 	if (unlikely(vhost_get_user(vq, avail_idx, &vq->avail->idx))) {
@@ -1921,11 +1922,12 @@ int vhost_prefetch_desc_indices(struct vhost_virtqueue *vq,
 		return -EFAULT;
 	}
 	vq->avail_idx = vhost16_to_cpu(vq, avail_idx);
-	total = MIN(num, vq->avail_idx - vq->last_avail_idx);
+	total = min(num, vq->avail_idx - vq->last_avail_idx);
 
 	last_avail_idx = vq->last_avail_idx & (vq->num - 1);
 	while (total) {
-		left = MIN(total, vq->num - last_avail_idx);
+		left = vq->num - last_avail_idx;
+		left = min(total, left);
 
 		ret = vhost_copy_from_user(vq, indices,
 					   &vq->avail->ring[last_avail_idx],
@@ -1944,6 +1946,7 @@ int vhost_prefetch_desc_indices(struct vhost_virtqueue *vq,
 
 	return total;
 }
+EXPORT_SYMBOL(vhost_prefetch_desc_indices);
 
 /* This looks in the virtqueue and for the first available buffer, and converts
  * it to an iovec for convenient access.  Since descriptors consist of some
@@ -2097,8 +2100,6 @@ int vhost_get_vq_desc2(struct vhost_virtqueue *vq,
 {
 	struct vring_desc desc;
 	unsigned int i, head, found = 0;
-	u16 last_avail_idx;
-	__virtio16 avail_idx;
 	int ret, access;
 
 	head = vhost16_to_cpu(vq, ring_head);
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index a9cbbb1..c8a40af 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -186,8 +186,15 @@ int vhost_get_vq_desc(struct vhost_virtqueue *,
 		      struct iovec iov[], unsigned int iov_count,
 		      unsigned int *out_num, unsigned int *in_num,
 		      struct vhost_log *log, unsigned int *log_num);
+int vhost_get_vq_desc2(struct vhost_virtqueue *,
+		       struct iovec iov[], unsigned int iov_count,
+		       unsigned int *out_num, unsigned int *in_num,
+		       struct vhost_log *log, unsigned int *log_num,
+		       __virtio16 ring_head);
 void vhost_discard_vq_desc(struct vhost_virtqueue *, int n);
 
+int vhost_prefetch_desc_indices(struct vhost_virtqueue *vq,
+				__virtio16 *indices, int num);
 int vhost_vq_init_access(struct vhost_virtqueue *);
 int vhost_add_used(struct vhost_virtqueue *, unsigned int head, int len);
 int vhost_add_used_n(struct vhost_virtqueue *, struct vring_used_elem *heads,
diff --git a/include/linux/ptr_ring.h b/include/linux/ptr_ring.h
index 4be401a..73cbe89 100644
--- a/include/linux/ptr_ring.h
+++ b/include/linux/ptr_ring.h
@@ -179,7 +179,7 @@ static inline int __ptr_ring_peek_queue_len(struct ptr_ring *r)
 	if (r->producer >= r->consumer)
 		return r->producer - r->consumer;
 	else
-		return r->producer + r->size - r->consumerr;
+		return r->producer + r->size - r->consumer;
 }
 
 /* Note: callers invoking this in a loop must use a compiler barrier,
