Bottom: dac553c6f759e0014912c1a398e09baddc891ee8
Top:    ac47d092683c6c27e5ef995a5877f26ec31162d7
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-07-21 12:03:34 +0800

Refresh of tun-xdp-support

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 7d87e61..18cc8d1 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -1272,9 +1272,11 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
 	size_t len = total_len, align = tun->align, linear;
 	struct virtio_net_hdr gso = { 0 };
 	struct tun_pcpu_stats *stats;
+	struct bpf_prog *xdp_prog;
 	int good_linear;
 	int copylen;
 	bool zerocopy = false;
+	bool xdp_xmit = false;
 	int err;
 	u32 rxhash;
 
@@ -1316,6 +1318,45 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
 			return -EINVAL;
 	}
 
+	rcu_read_lock();
+	xdp_prog = rcu_dereference(tfile->xdp_prog);
+	if (xdp_prog) {
+		struct iovec iov = iov_iter_iovec(from);
+		struct xdp_buff xdp;
+		void *orig_data;
+		u32 act;
+
+		if (unlikely(hdr->hdr.gso_type))
+			goto err_xdp;
+		if (iov->iov_len > PAGE_SIZE)
+			goto err_xdp;
+		if (from->nr_segs > 1)
+			tun_linearize_page();
+
+		xdp.data_hard_start = iov.iov_base - vnet_hdr_sz;
+		xdp.data = iov.iov_base;
+		xdp.data_end = xdp.data + iov.iov_len;
+		orig_data = xdp.data;
+		act = bpf_prog_run_xdp(xdp_prog, &xdp);
+
+		switch (act) {
+		case XDP_PASS:
+			break;
+		case XDP_TX:
+			xdp_xmit = true;
+			break;
+		default:
+			bpf_warn_invalid_xdp_action(act);
+			/* fall through */
+		case XDP_ABORTED:
+			trace_xdp_exception(vi->dev, xdp_prog, act);
+			/* fall through */
+		case XDP_DROP:
+			goto err_xdp;
+		}
+	}
+	rcu_read_unlock();
+
 	good_linear = SKB_MAX_HEAD(align);
 
 	if (msg_control) {
@@ -1421,6 +1462,11 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
 
 	tun_flow_update(tun, rxhash, tfile);
 	return total_len;
+
+err_xdp:
+	rcu_read_unlock();
+	this_cpu_inc(tun->pcpu_stats->rx_dropped);
+	return total_len;
 }
 
 static ssize_t tun_chr_write_iter(struct kiocb *iocb, struct iov_iter *from)
