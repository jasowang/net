Bottom: 76e16f6a38440ca020ba2701f8a1166c744856b8
Top:    becb42a7b520e4bc05fffb8f9dece5e304ccc2f8
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-03-01 15:37:11 +0800

Refresh of vhost_net-avoid-peeking-socket

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 30863e3..84fdd96 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -2614,6 +2614,19 @@ struct socket *tun_get_socket(struct file *file)
 }
 EXPORT_SYMBOL_GPL(tun_get_socket);
 
+struct skb_array *tap_get_skb_array(struct file *file)
+{
+	struct tun_file *tfile;
+
+	if (file->f_op != &tun_fops)
+		return ERR_PTR(-EINVAL);
+	tfile = file->private_data;
+	if (!tfile)
+		return ERR_PTR(-EBADFD);
+	return &tfile->tx_array;
+}
+EXPORT_SYMBOL_GPL(tap_get_skb_array);
+
 module_init(tun_init);
 module_exit(tun_cleanup);
 MODULE_DESCRIPTION(DRV_DESCRIPTION);
diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index 62ebe93..15d689b 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -26,6 +26,7 @@
 #include <linux/if_macvlan.h>
 #include <linux/if_tap.h>
 #include <linux/if_vlan.h>
+#include <linux/skb_array.h>
 
 #include <net/sock.h>
 
@@ -533,6 +534,17 @@ static int sk_has_rx_data(struct sock *sk)
 	return skb_queue_empty(&sk->sk_receive_queue);
 }
 
+static bool sk_rx_array_has_data(struct sock *sk)
+{
+	struct socket *sock = sk->sk_socket;
+	struct skb_array *skb_array = tap_get_skb_array(sock->file);
+
+	if (skb_array)
+		return !__skb_array_empty(skb_array);
+	else
+		return sk_has_rx_data(sk);
+}
+
 static int vhost_net_rx_peek_head_len(struct vhost_net *net,
 				      struct sock *sk)
 {
@@ -540,7 +552,7 @@ static int vhost_net_rx_peek_head_len(struct vhost_net *net,
 	struct vhost_virtqueue *vq = &nvq->vq;
 	unsigned long uninitialized_var(endtime);
 	int mergeable = vhost_has_feature(vq, VIRTIO_NET_F_MRG_RXBUF);
-	int len = mergeable ? peek_head_len(sk) : sk_has_rx_data(sk);
+	int len = mergeable ? peek_head_len(sk) : sk_rx_array_has_data(sk);
 
 	if (!len && vq->busyloop_timeout) {
 		/* Both tx vq and rx socket were polled here */
@@ -561,7 +573,7 @@ static int vhost_net_rx_peek_head_len(struct vhost_net *net,
 			vhost_poll_queue(&vq->poll);
 		mutex_unlock(&vq->mutex);
 
-		len = peek_head_len(sk);
+		len = mergeable ? peek_head_len(sk) : sk_rx_array_has_data(sk);
 	}
 
 	return len;
@@ -703,7 +715,6 @@ static void handle_rx(struct vhost_net *net)
 			if (headcount > 0) {
 				vhost_len = vq->heads[0].len;
 				sock_len = vhost_len - vhost_hlen;
-
 			}
 		}
 
diff --git a/include/linux/if_tap.h b/include/linux/if_tap.h
index 3482c3c..a99f3a1 100644
--- a/include/linux/if_tap.h
+++ b/include/linux/if_tap.h
@@ -3,6 +3,7 @@
 
 #if IS_ENABLED(CONFIG_TAP)
 struct socket *tap_get_socket(struct file *);
+struct skb_array *tap_get_skb_array(struct file *);
 #else
 #include <linux/err.h>
 #include <linux/errno.h>
@@ -12,6 +13,10 @@ static inline struct socket *tap_get_socket(struct file *f)
 {
 	return ERR_PTR(-EINVAL);
 }
+static inline struct socket *tap_get_skb_array(struct file *f)
+{
+	return ERR_PTR(-EINVAL);
+}
 #endif /* CONFIG_TAP */
 
 #include <net/sock.h>
