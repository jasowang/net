Bottom: 4277430851bf7c4f6a0cef457a85ffbc94fe11cf
Top:    4d4dd3be1f43efa6e38a28a241ed37e01ccdeef5
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-07-19 13:56:02 +0800

Refresh of tuntap-simplify-error-handling

---

diff --git a/drivers/net/tun.c.rej b/drivers/net/tun.c.rej
new file mode 100644
index 0000000..f19df4f
--- /dev/null
+++ b/drivers/net/tun.c.rej
@@ -0,0 +1,64 @@
+--- drivers/net/tun.c
++++ drivers/net/tun.c
+@@ -1659,24 +1662,16 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
+ 
+ 		switch (act) {
+ 		case XDP_REDIRECT:
+-			get_page(alloc_frag->page);
+-			alloc_frag->offset += buflen;
+ 			err = xdp_do_redirect(tun->dev, &xdp, xdp_prog);
+ 			xdp_do_flush_map();
+ 			if (err)
+-				goto err_redirect;
+-			rcu_read_unlock();
+-			preempt_enable();
+-			return NULL;
++				goto err_xdp;
++			goto out;
+ 		case XDP_TX:
+-			get_page(alloc_frag->page);
+-			alloc_frag->offset += buflen;
+ 			if (tun_xdp_xmit(tun->dev, &xdp))
+-				goto err_redirect;
++				goto err_xdp;
+ 			tun_xdp_flush(tun->dev);
+-			rcu_read_unlock();
+-			preempt_enable();
+-			return NULL;
++			goto out;
+ 		case XDP_PASS:
+ 			delta = orig_data - xdp.data;
+ 			break;
+@@ -1695,25 +1690,23 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
+ 
+ 	skb = build_skb(buf, buflen);
+ 	if (!skb) {
+-		rcu_read_unlock();
+-		preempt_enable();
+-		return ERR_PTR(-ENOMEM);
++		skb = ERR_PTR(-ENOMEM);
++		goto out;
+ 	}
+ 
+ 	skb_reserve(skb, pad - delta);
+ 	skb_put(skb, len + delta);
+-	get_page(alloc_frag->page);
+-	alloc_frag->offset += buflen;
+ 
+ 	return skb;
+ 
+-err_redirect:
+-	put_page(alloc_frag->page);
+ err_xdp:
++	alloc_frag->offset -= buflen;
++	put_page(alloc_frag->page);
++	this_cpu_inc(tun->pcpu_stats->rx_dropped);
++out:
+ 	rcu_read_unlock();
+ 	preempt_enable();
+-	this_cpu_inc(tun->pcpu_stats->rx_dropped);
+-	return NULL;
++	return skb;
+ }
+ 
+ /* Get packet from user space buffer */
