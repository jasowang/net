Bottom: f6ee6be12f8331629ab0d0f559cf2c7ac55ceb16
Top:    39957898eab8fb10dcacfe0cf128983ec2d10102
Author: Jason Wang <jasowang@redhat.com>
Date:   2016-07-14 15:24:19 +0800

Refresh of add-a-vq-meta-data-iotlb

---

diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index 79001be..e3fea52 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -285,18 +285,18 @@ void vhost_poll_queue(struct vhost_poll *poll)
 }
 EXPORT_SYMBOL_GPL(vhost_poll_queue);
 
-static void __vhost_vq_iotlb_reset(struct vhost_virtqueue *vq)
+static void __vhost_vq_meta_reset(struct vhost_virtqueue *vq)
 {
 	int j;
 	for (j = 0; j < VHOST_NUM_ADDRS; j++)
-			vq->vq_iotlb[j] = NULL;
+			vq->meta_iotlb[j] = NULL;
 }
 
-static void vhost_vq_iotlb_reset(struct vhost_dev *d)
+static void vhost_vq_meta_reset(struct vhost_dev *d)
 {
 	int i;
 	for (i = 0; i < d->nvqs; ++i)
-		__vhost_vq_iotlb_reset(d->vqs[i]);
+		__vhost_vq_meta_reset(d->vqs[i]);
 }
 
 static void vhost_vq_reset(struct vhost_dev *dev,
@@ -328,7 +328,7 @@ static void vhost_vq_reset(struct vhost_dev *dev,
 	vq->busyloop_timeout = 0;
 	vq->umem = NULL;
 	vq->iotlb = NULL;
-	__vhost_vq_iotlb_reset(vq);
+	__vhost_vq_meta_reset(vq);
 }
 
 static int vhost_worker(void *data)
@@ -710,16 +710,19 @@ static int vq_memory_access_ok(void __user *log_base, struct vhost_umem *umem,
 	return 1;
 }
 
-static void __user *vhost_vq_iotlb_fetch(struct vhost_virtqueue *vq,
-					 u64 addr, unsigned size, int type)
+static void __user *vhost_vq_meta_fetch(struct vhost_virtqueue *vq,
+					u64 addr, unsigned size, int type)
 {
 	const struct vhost_umem_node *node;
+	int access = VHOST_ACCESS_RO;
 
 	switch (type) {
+	case VHOST_ADDR_USED:
+		access = VHOST_ACCESS_WO;
+		/* fall through */
 	case VHOST_ADDR_DESC:
 	case VHOST_ADDR_AVAIL:
-	case VHOST_ADDR_USED:
-		node = vq->vq_iotlb[type];
+		node = vq->meta_iotlb[type];
 		break;
 	default:
 		BUG();
@@ -728,9 +731,10 @@ static void __user *vhost_vq_iotlb_fetch(struct vhost_virtqueue *vq,
 	if (!node)
 		return NULL;
 
-	BUG_ON(addr < node->start || (u64)addr > node->start + node->size);
+	BUG_ON(addr < node->start || (u64)addr >= node->start + node->size);
 
-	if ((u64)addr + size >= node->start + node->size)
+	if (!(node->perm & access) &&
+	    (u64)addr + size >= node->start + node->size)
 		return NULL;
 
 	return (void *)(node->userspace_addr + (u64)addr - node->start);
@@ -780,7 +784,7 @@ static int vhost_copy_to_user(struct vhost_virtqueue *vq, void *to,
 		 */
 		/* TODO: more fast path */
 		struct iov_iter t;
-		void __user *uaddr = vhost_vq_iotlb_fetch(vq,
+		void __user *uaddr = vhost_vq_meta_fetch(vq,
 				     (u64)(uintptr_t)to, size, type);
 
 		if (uaddr)
@@ -814,7 +818,7 @@ static int vhost_copy_from_user(struct vhost_virtqueue *vq, void *to,
 		 * not happen in this case.
 		 */
 		/* TODO: more fast path */
-		void __user *uaddr = vhost_vq_iotlb_fetch(vq,
+		void __user *uaddr = vhost_vq_meta_fetch(vq,
 				     (u64)(uintptr_t)from, size, type);
 		struct iov_iter f;
 
@@ -843,7 +847,7 @@ out:
 static void __user *__vhost_get_user(struct vhost_virtqueue *vq,
 				     void *addr, unsigned size, int type)
 {
-	void __user *uaddr = vhost_vq_iotlb_fetch(vq,
+	void __user *uaddr = vhost_vq_meta_fetch(vq,
 			     (u64)(uintptr_t)addr, size, type);
 	int ret;
 
@@ -1017,7 +1021,7 @@ int vhost_process_iotlb_msg(struct vhost_dev *dev,
 		vhost_iotlb_notify_vq(dev, msg);
 		break;
 	case VHOST_IOTLB_INVALIDATE:
-		vhost_vq_iotlb_reset(dev);
+		vhost_vq_meta_reset(dev);
 		vhost_del_umem_range(dev->iotlb, msg->iova,
 				     msg->iova + msg->size - 1);
 		break;
@@ -1161,7 +1165,7 @@ static int vq_access_ok(struct vhost_virtqueue *vq, unsigned int num,
 			sizeof *used + num * sizeof *used->ring + s);
 }
 
-static void vhost_vq_iotlb_update(struct vhost_virtqueue *vq,
+static void vhost_vq_meta_update(struct vhost_virtqueue *vq,
 				  const struct vhost_umem_node *node,
 				  int type)
 {
@@ -1169,7 +1173,7 @@ static void vhost_vq_iotlb_update(struct vhost_virtqueue *vq,
 	case VHOST_ADDR_DESC:
 	case VHOST_ADDR_AVAIL:
 	case VHOST_ADDR_USED:
-		vq->vq_iotlb[type] = node;
+		vq->meta_iotlb[type] = node;
 		break;
 	default:
 		BUG();
@@ -1183,6 +1187,9 @@ static int iotlb_access_ok(struct vhost_virtqueue *vq,
 	struct vhost_umem *umem = vq->iotlb;
 	u64 s = 0, size, orig_addr = addr;
 
+	if (vhost_vq_meta_fetch(vq, addr, len, type))
+		return true;
+
 	while (len > s) {
 		node = vhost_umem_interval_tree_iter_first(&umem->umem_tree,
 							   addr,
@@ -1199,8 +1206,8 @@ static int iotlb_access_ok(struct vhost_virtqueue *vq,
 
 		size = node->size - addr + node->start;
 
-		if (orig_addr == addr && size == len)
-			vhost_vq_iotlb_update(vq, node, type);
+		if (orig_addr == addr && size >= len)
+			vhost_vq_meta_update(vq, node, type);
 
 		s += size;
 		addr += size;
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index b1b1aa6..ddd621f4 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -91,7 +91,7 @@ struct vhost_virtqueue {
 	struct vring_desc __user *desc;
 	struct vring_avail __user *avail;
 	struct vring_used __user *used;
-	const struct vhost_umem_node *vq_iotlb[VHOST_NUM_ADDRS];
+	const struct vhost_umem_node *meta_iotlb[VHOST_NUM_ADDRS];
 	struct file *kick;
 	struct file *call;
 	struct file *error;
