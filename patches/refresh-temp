Bottom: 6fc1057a21e6029ad5922a0d79577a0575a193d9
Top:    6ff88adf99eab170366d46282b6a5090c481b8e5
Author: Jason Wang <jasowang@redhat.com>
Date:   2016-07-05 13:13:08 +0800

Refresh of debug

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index b4f1d05..1b253ac 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -1209,11 +1209,13 @@ static ssize_t tun_get_user(struct tun_struct *tun, struct tun_file *tfile,
 		    tun16_to_cpu(tun, gso.csum_start) +
 		    tun16_to_cpu(tun, gso.csum_offset) + 2 >
 			tun16_to_cpu(tun, gso.hdr_len)) {
-			printk("csum start %d csum offset %d hdr_len %d\n", tun16_to_cpu(tun, gso.csum_start),
+			if (!gso.csum_start || !gso.csum_offset)
+				printk("csum start %d csum offset %d hdr_len %d\n", tun16_to_cpu(tun, gso.csum_start),
 				tun16_to_cpu(tun, gso.csum_offset),
 				tun16_to_cpu(tun, gso.hdr_len));
 			gso.hdr_len = cpu_to_tun16(tun, tun16_to_cpu(tun, gso.csum_start) + tun16_to_cpu(tun, gso.csum_offset) + 2);
-			printk("adjusted %d\n", tun16_to_cpu(tun, gso.hdr_len));
+			if (!gso.csum_start || !gso.csum_offset)
+				printk("adjusted %d\n", tun16_to_cpu(tun, gso.hdr_len));
 		}
 		if (tun16_to_cpu(tun, gso.hdr_len) > len)
 			return -EINVAL;
diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 1dd08d4..34f5c49 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -843,6 +843,13 @@ static int xmit_skb(struct send_queue *sq, struct sk_buff *skb)
 	if (vi->mergeable_rx_bufs)
 		hdr->num_buffers = 0;
 
+	if (hdr->hdr.flags & VIRTIO_NET_HDR_F_NEEDS_CSUM &&
+		(!hdr->hdr.csum_start || !hdr->hdr.csum_offset)) {
+		printk("csum start %d csum offset %d\n",
+			hdr->hdr.csum_start, hdr->hdr.csum_offset);
+		dump_stack();
+	}
+
 	sg_init_table(sq->sg, skb_shinfo(skb)->nr_frags + (can_push ? 1 : 2));
 	if (can_push) {
 		__skb_push(skb, hdr_len);
diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index ff5319e..a5ebfec 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -422,6 +422,14 @@ static void handle_tx(struct vhost_net *net)
 		{
 			struct virtio_net_hdr gso = { 0 };
 			n = copy_from_iter(&gso, sizeof(gso), &tmp);
+			if (gso.flags & VIRTIO_NET_HDR_F_NEEDS_CSUM &&
+				(!gso.csum_start || !gso.csum_offset)) {
+				printk("start %d offset %d\n",
+					vhost16_to_cpu(vq,
+						gso.csum_start),
+					vhost16_to_cpu(vq,
+						gso.csum_offset));
+			}
 			if (n != sizeof(gso))
 				printk("header error!\n");
 			if (gso.hdr_len && vhost16_to_cpu(vq,
