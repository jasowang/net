Bottom: b6a1359aab318e6d33751433d2e8408868553468
Top:    347c56960bbaf0d9a20bdf30720a78f5e6679ca4
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-04-23 17:13:16 +0800

Refresh of vhost_net-build-skb-and-xdp

---

diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index 1584dbf..1245c85 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -456,7 +456,7 @@ static bool vhost_exceeds_maxpend(struct vhost_net *net)
 #define VHOST_NET_HEADROOM 256
 #define VHOST_NET_RX_PAD (NET_IP_ALIGN + NET_SKB_PAD)
 
-static int vhost_net_build_pkt(struct vhost_virtqueue *nvq,
+static int vhost_net_build_xdp(struct vhost_net_virtqueue *nvq,
 			       struct iov_iter *from,
 			       struct xdp_buff *xdp)
 {
@@ -466,20 +466,22 @@ static int vhost_net_build_pkt(struct vhost_virtqueue *nvq,
 	size_t len = iov_iter_count(from);
 	int buflen = SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 	int pad = VHOST_NET_RX_PAD + VHOST_NET_HEADROOM;
-	void *ret;
+	int sock_hlen = nvq->sock_hlen;
+	void *buf;
+	int copied;
 
 	if (len < nvq->sock_hlen)
 		return -EFAULT;
 
-	len -= nvq->sock_hlen;
+	len -= sock_hlen;
 
 	if (!copy_from_iter_full(&gso, sizeof(gso), from))
 		return -EFAULT;
 
 	if ((gso.flags & VIRTIO_NET_HDR_F_NEEDS_CSUM) &&
-	    vhost16_to_cpu(&vq->vq, gso.csum_start) +
-	    vhost16_to_cpu(&vq->vq, gso.csum_offset) + 2 >
-	    vhost16_to_cpu(&vq->vq, gso.hdr_len))
+	    vhost16_to_cpu(vq, gso.csum_start) +
+	    vhost16_to_cpu(vq, gso.csum_offset) + 2 >
+	    vhost16_to_cpu(vq, gso.hdr_len))
 		gso.hdr_len = cpu_to_vhost16(vq,
 			      vhost16_to_cpu(vq, gso.csum_start) +
 			      vhost16_to_cpu(vq, gso.csum_offset) + 2);
@@ -512,9 +514,8 @@ static int vhost_net_build_pkt(struct vhost_virtqueue *nvq,
 
 	xdp->data_hard_start = buf;
 	xdp->data = buf + pad;
-	xdp_set_data_meta_invalid(xdp);
-	xdp.data_end = xdp.data + len;
-	*(int *)xdp.data_hard_start = buflen;
+	xdp->data_end = xdp->data + len;
+	*(int *)xdp->data_hard_start = buflen;
 
 	get_page(alloc_frag->page);
 	alloc_frag->offset += buflen;
