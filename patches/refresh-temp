Bottom: fc04b994e87daa4398be0943c6a4cd1bed35a71d
Top:    af75fe2613f817464868f5a007205baf7941f6a0
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-02-17 18:01:31 +0800

Refresh of virtio-net-optimize-small

---

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index b8e5c2d..1cbeac1 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -41,6 +41,8 @@ module_param(gso, bool, 0444);
 #define GOOD_PACKET_LEN (ETH_HLEN + VLAN_HLEN + ETH_DATA_LEN)
 #define GOOD_COPY_LEN	128
 
+#define VIRTNET_RX_PAD (NET_IP_ALIGN + NET_SKB_PAD)
+
 /* Amount of XDP headroom to prepend to packets for use by xdp_adjust_head */
 #define VIRTIO_XDP_HEADROOM 256
 
@@ -420,7 +422,7 @@ static struct sk_buff *receive_small(struct net_device *dev,
 {
 	struct sk_buff *skb;
 	struct bpf_prog *xdp_prog;
-	unsigned int headroom = vi->hdr_len + NET_IP_ALIGN +
+	unsigned int headroom = vi->hdr_len + VIRTNET_RX_PAD +
 		                virtnet_get_headroom(vi);
 	unsigned int buflen = SKB_DATA_ALIGN(GOOD_PACKET_LEN + headroom) +
 		              SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
@@ -471,7 +473,7 @@ static struct sk_buff *receive_small(struct net_device *dev,
 	}
 	skb_reserve(skb, headroom);
 	skb_put(skb, len);
-	buf += NET_IP_ALIGN + virtnet_get_headroom(vi);
+	buf += VIRTNET_RX_PAD + virtnet_get_headroom(vi);
 	memcpy(skb_vnet_hdr(skb), buf, vi->hdr_len);
 
 err:
@@ -808,7 +810,7 @@ static int add_recvbuf_small(struct virtnet_info *vi, struct receive_queue *rq,
 	struct page_frag *alloc_frag = &rq->alloc_frag;
 	char *buf;
 	unsigned int xdp_headroom = virtnet_get_headroom(vi);
-	int len = vi->hdr_len + NET_IP_ALIGN + GOOD_PACKET_LEN + xdp_headroom;
+	int len = vi->hdr_len + VIRTNET_RX_PAD + GOOD_PACKET_LEN + xdp_headroom;
 	int err;
 
 	len = SKB_DATA_ALIGN(len) +
@@ -819,7 +821,7 @@ static int add_recvbuf_small(struct virtnet_info *vi, struct receive_queue *rq,
 	buf = (char *)page_address(alloc_frag->page) + alloc_frag->offset;
 	get_page(alloc_frag->page);
 	alloc_frag->offset += len;
-	sg_init_one(rq->sg, buf + NET_IP_ALIGN + xdp_headroom,
+	sg_init_one(rq->sg, buf + VIRTNET_RX_PAD + xdp_headroom,
 		    vi->hdr_len + GOOD_PACKET_LEN);
 	err = virtqueue_add_inbuf(rq->vq, rq->sg, 1, buf, gfp);
 	if (err < 0)
