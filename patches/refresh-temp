Bottom: 61a23d4c2297019f71edf0c8b66f54c023a70ad0
Top:    05c0b45011fbf09c28f3e8fa43cdecbfbe41316f
Author: Jason Wang <jasowang@redhat.com>
Date:   2015-06-25 16:01:50 +0800

Refresh of tun-rework-on-flow-cache

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 736765c..3062b79 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -156,9 +156,9 @@ struct tun_file {
 };
 
 struct tun_flow_table {
-	u32 ents[0] ____cacheline_aligned_in_smp;
+	u32 ent;
+	u32 rps_hash;
 };
-#define TUN_FLOW_TABLE_SIZE(_num) (offsetof(struct tun_flow_table, ents[_num]))
 
 #define TUN_NUM_FLOW_ENTRIES 1024
 #define TUN_FLOW_MASK 0x3FF
@@ -210,8 +210,8 @@ static void tun_flow_delete_by_queue(struct tun_struct *tun, u16 queue_index)
 	int i;
 
 	for (i = 0; i < TUN_NUM_FLOW_ENTRIES; i++) {
-		if ((tun->flows->ents[i] & TAP_QUEUE_MASK) == queue_index)
-			tun->flows->ents[i] = 0;
+		if ((tun->flows[i].ent & TAP_QUEUE_MASK) == queue_index)
+			tun->flows[i].ent = 0;
 	}
 }
 
@@ -224,7 +224,7 @@ static void tun_flow_update(struct tun_struct *tun, u32 rxhash,
 	if (!rxhash)
 		return;
 	else
-		tun->flows->ents[index] = val;
+		tun->flows[index].ent = val;
 }
 
 /* We try to identify a flow through its rxhash first. The reason that
@@ -247,7 +247,7 @@ static u16 tun_select_queue(struct net_device *dev, struct sk_buff *skb,
 
 	hash = skb_get_hash(skb);
 	if (hash) {
-		u32 ident = tun->flows->ents[hash & TUN_FLOW_MASK];
+		u32 ident = tun->flows[hash & TUN_FLOW_MASK].ent;
 
 		if ((ident ^ hash) & ~TAP_QUEUE_MASK) {
 			/* use multiply and shift instead of expensive divide */
@@ -746,7 +746,8 @@ static const struct net_device_ops tap_netdev_ops = {
 
 static void tun_flow_init(struct tun_struct *tun)
 {
-	tun->flows = vzalloc(TUN_FLOW_TABLE_SIZE(TUN_NUM_FLOW_ENTRIES));
+	tun->flows = vzalloc(sizeof(struct tun_flow_table) *
+			     TUN_NUM_FLOW_ENTRIES);
 }
 
 static void tun_flow_uninit(struct tun_struct *tun)
