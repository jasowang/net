Bottom: 5b1aa964f5e410fb045ba97c0af8d5131a186505
Top:    278f682f209e8da813d75fcaec6a37dd0cc4afdf
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-01-24 18:14:20 +0800

Refresh of debug

---

diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index 552073f..26dc3aa 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -1998,16 +1998,16 @@ static int vhost_read_indices(struct vhost_virtqueue *vq, u16 num)
 	int i;
 
 	//BUG_ON(indices->read_tail != indices->tail);
-	printk("read indices tail %d read_tail %d head %d\n",
-		indices->tail, indices->read_tail, indices->head);
+	printk("vq %p read indices tail %d read_tail %d head %d\n",
+		vq, indices->tail, indices->read_tail, indices->head);
 	if (indices->read_tail != indices->tail)
-		printk("read_tail is not equal to tail\n");
+		printk("vq %p read_tail is not equal to tail\n", vq);
 
 	if (unlikely(vhost_get_avail(vq, avail_idx, &vq->avail->idx))) {
 		vq_err(vq, "Failed to access avail idx at %p\n",
 		       &vq->avail->idx);
-		printk("Failed to access avail idx at %p\n",
-			&vq->avail->idx);
+		printk("vq %p Failed to access avail idx at %p\n",
+			vq, &vq->avail->idx);
 		return -EFAULT;
 	}
 	last_avail_idx = vq->last_avail_idx & (vq->num - 1);
@@ -2030,8 +2030,8 @@ static int vhost_read_indices(struct vhost_virtqueue *vq, u16 num)
 			       heads[i], vq->num);
 			return -EINVAL;
 		}
-		printk("head %d offset %d\n",
-			heads[i], i);
+		printk("vq %p head %d offset %d\n",
+			vq, heads[i], i);
 		last_avail_idx = (last_avail_idx + 1) & (vq->num - 1);
 	}
 
@@ -2040,8 +2040,8 @@ static int vhost_read_indices(struct vhost_virtqueue *vq, u16 num)
 	indices->head = ret;
 	indices->tail = indices->read_tail = 0;
 
-	printk("indices head %d tail %d\n",
-		indices->head, indices->tail);
+	printk("vq %p indices head %d tail %d\n",
+		vq, indices->head, indices->tail);
 	return ret;
 }
 
@@ -2057,10 +2057,10 @@ static int vhost_read_descs(struct vhost_virtqueue *vq, int num)
 	descs->head = descs->tail = 0;
 
 	head = next_desc(vq, desc);
-	printk("last desc flags %d avail %d\n", desc->flags, head);
+	printk("vq %p, last desc flags %d avail %d\n", vq, desc->flags, head);
 
 	while (((head = next_desc(vq, desc)) != -1) && (descs->head < num)) {
-		printk("continue read desc %d\n", head);
+		printk("vq %p continue read desc %d\n", vq, head);
 		desc = &descs->descs[descs->head];
 		ret = vhost_copy_from_user(vq, desc,
 					   vq->desc + head,
@@ -2069,9 +2069,9 @@ static int vhost_read_descs(struct vhost_virtqueue *vq, int num)
 			vq_err(vq, "Failed to get descriptor: "
 				"idx %d addr %p\n",
 				head, vq->desc + head);
-			printk("Failed to get descriptor: "
+			printk("vq %p Failed to get descriptor: "
 				"idx %d addr %p\n",
-				head, vq->desc + head);
+				vq, head, vq->desc + head);
 			goto err;
 		}
 		descs->head++;
@@ -2082,19 +2082,27 @@ static int vhost_read_descs(struct vhost_virtqueue *vq, int num)
 		return 0;
 	}
 
-	printk("indices head %d indices tail %d\n",
-		indices->head, indices->tail);
+	printk("vq %p indices head %d indices tail %d\n",
+		vq, indices->head, indices->tail);
 
 	if (unlikely(indices->head == indices->tail)) {
 		ret = vhost_read_indices(vq, num);
-		if (unlikely(ret))
+		if (unlikely(ret < 0)) {
+			printk("vq %p no new indices!\n", vq);
 			goto err;
+		}
 	}
 
 	descs->last_desc.flags = 0;
+	printk("vq %p want to read desc from indices tail %d head %d\n",
+		vq, indices->tail, indices->head);
 	while (indices->tail < indices->head) {
+		printk("vq %p reading descs for indices tail %d\n",
+			vq, indices->tail);
 		head = vhost16_to_cpu(vq, indices->indices[indices->tail++]);
 		while(1) {
+			printk("vq %p read desc to descs head %d\n",
+				vq, descs->head);
 			desc = &descs->descs[descs->head];
 			ret = vhost_copy_from_user(vq, desc,
 						   vq->desc + head,
@@ -2103,9 +2111,10 @@ static int vhost_read_descs(struct vhost_virtqueue *vq, int num)
 				vq_err(vq, "Failed to get descriptor: "
 					   "idx %d addr %p\n",
 					   head, vq->desc + head);
-				printk("Failed to get descriptor: "
+
+				printk("vq %p Failed to get descriptor: "
 					"idx %d addr %p\n",
-					head, vq->desc + head);
+					vq, head, vq->desc + head);
 				goto err;
 			}
 
@@ -2117,7 +2126,7 @@ static int vhost_read_descs(struct vhost_virtqueue *vq, int num)
 
 			head = next_desc(vq, desc);
 			if (head == -1)
-				goto done;
+				break;
 			if (loop++ > 64) {
 				printk("Dead loop!\n");
 				ret = -EFAULT;
@@ -2141,16 +2150,16 @@ static struct vring_desc *vhost_next_desc(struct vhost_virtqueue *vq,
 	struct vhost_indices *indices = &vq->indices;
 	struct vring_desc *desc;
 
-	printk("desc->tail %d, desc->head %d\n",
-		descs->tail, descs->head);
+	printk("vq %p desc->tail %d, desc->head %d\n",
+		vq, descs->tail, descs->head);
 	if (descs->tail == descs->head) {
 		int ret = vhost_read_descs(vq, 64);
 		if (ret < 0) {
-			printk("fail to read descs!\n");
+			printk("vq %p fail to read descs!\n", vq);
 			return ERR_PTR(-EFAULT);
 		}
-		if (indices->tail == indices->head) {
-			printk("no new heads!\n");
+		if (indices->read_tail == indices->head) {
+			printk("vq %p no new heads!\n", vq);
 			return NULL;
 		}
 	}
@@ -2159,7 +2168,8 @@ static struct vring_desc *vhost_next_desc(struct vhost_virtqueue *vq,
 		*head = indices->indices[indices->read_tail++];
 	desc = &descs->descs[descs->tail++];
 
-	printk("advance %d desc %p head %d\n", advance, desc, *head);
+	printk("vq %p advance %d desc %p head %d\n",
+		vq, advance, desc, *head);
 	return desc;
 }
 
@@ -2186,10 +2196,14 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 	/* If there's nothing new since last we looked, return
 	 * invalid.
 	 */
-	if (desc == NULL)
+	if (desc == NULL) {
+		printk("vq %p nothing new!\n", vq);
 		return vq->num;
-	if (IS_ERR(desc))
+	}
+	if (IS_ERR(desc)) {
+		printk("vq %p desc err!\n", vq);
 		return -EFAULT;
+	}
 
 	head = vhost16_to_cpu(vq, ring_head);
 
@@ -2202,6 +2216,7 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 		unsigned iov_count = *in_num + *out_num;
 
 		if (unlikely(++found > vq->num)) {
+			printk("vq %p loop detected!\n", vq);
 			vq_err(vq, "Loop detected: vq size %u head %u\n",
 			       vq->num, head);
 			return -EINVAL;
@@ -2211,6 +2226,7 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 					   out_num, in_num,
 					   log, log_num, desc);
 			if (unlikely(ret < 0)) {
+				printk("vq %p indirect fail!\n", vq);
 				if (ret != -EAGAIN)
 					vq_err(vq, "Failure detected "
 						"in indirect descriptor");
@@ -2228,11 +2244,14 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 				     iov + iov_count,
 				     iov_size - iov_count, access);
 		if (unlikely(ret < 0)) {
-			if (ret != -EAGAIN)
+			if (ret != -EAGAIN) {
+				printk("vq %p translation failure!\n",vq);
 				vq_err(vq, "Translation failure %d descriptor "
 					   "idx\n", ret);
+			}
 			return ret;
-		}
+		} else
+			printk("vq %p translation succeed!\n", vq);
 		if (access == VHOST_ACCESS_WO) {
 			/* If this is an input descriptor,
 			 * increment that count. */
@@ -2248,6 +2267,7 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			/* If it's an output descriptor, they're all supposed
 			 * to come before any input descriptors. */
 			if (unlikely(*in_num)) {
+				printk("vq %p out after in!\n", vq);
 				vq_err(vq, "Descriptor has out after in\n");
 				return -EINVAL;
 			}
