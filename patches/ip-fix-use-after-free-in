Bottom: ad01e2a21366fd53c049909d2943604bae7081b4
Top:    6be23939aa8c94b1a767f4aebb9a0bea08de3275
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-07-05 10:52:32 +0800

net: ipv4: fix use after free in ip_list_rcv()

When skb was freed by ip_rcv_core() its pointer was left in the list
which will lead use after free when trying to dispatching the final
sublist. Fixing this by delete skb from the list before calling
ip_rcv_core().

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
index 24b9b02..a4a13cc 100644
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -581,20 +581,23 @@ void ip_list_rcv(struct list_head *head, struct packet_type *pt,
 		struct net_device *dev = skb->dev;
 		struct net *net = dev_net(dev);
 
+		list_del(&skb->list);
 		skb = ip_rcv_core(skb, net);
 		if (skb == NULL)
 			continue;
 
 		if (curr_dev != dev || curr_net != net) {
 			/* dispatch old sublist */
-			list_cut_before(&sublist, head, &skb->list);
-			if (!list_empty(&sublist))
+			if (!list_empty(&sublist)) {
 				ip_sublist_rcv(&sublist, dev, net);
+				INIT_LIST_HEAD(&sublist);
+			}
 			/* start new sublist */
 			curr_dev = dev;
 			curr_net = net;
 		}
+		list_add_tail(&skb->list, &sublist);
 	}
 	/* dispatch final sublist */
-	ip_sublist_rcv(head, curr_dev, curr_net);
+	ip_sublist_rcv(&sublist, curr_dev, curr_net);
 }
