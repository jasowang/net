Bottom: f630f326ef99cba10e6aae9c014618e9ede076a1
Top:    594f3884c31e215a4715569ca4a55d21563fd5b8
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-05-14 14:25:10 +0800

fix for flag

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 4102f0f..be8a009 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -3281,6 +3281,7 @@ static int tun_chr_open(struct inode *inode, struct file * file)
 	INIT_LIST_HEAD(&tfile->next);
 
 	sock_set_flag(&tfile->sk, SOCK_ZEROCOPY);
+	sock_set_flag(&tfile->sk, SOCK_XDP_BUFF);
 
 	memset(&tfile->tx_ring, 0, sizeof(tfile->tx_ring));
 
diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index aff338a..7777b21 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -595,6 +595,7 @@ static void handle_tx_copy(struct vhost_net *net)
 	struct vhost_net_ubuf_ref *uninitialized_var(ubufs);
 	int sent_pkts = 0;
 	s16 nheads = 0;
+	bool can_xdp = sock_flag(sock->sk, SOCK_XDP_BUFF);
 
 	mutex_lock(&vq->mutex);
 	sock = vq->private_data;
@@ -637,11 +638,15 @@ static void handle_tx_copy(struct vhost_net *net)
 		vq->heads[nheads].id = cpu_to_vhost32(vq, head);
 		vq->heads[nheads].len = 0;
 
-		err = vhost_net_build_xdp(nvq, &msg.msg_iter, &xdp);
-		if (!err)
-			msg.msg_control = &xdp;
-		else
-			msg.msg_control = NULL;
+		msg.msg_control = NULL;
+		if (can_xdp) {
+			err = vhost_net_build_xdp(nvq, &msg.msg_iter, &xdp);
+			if (!err)
+				msg.msg_control = &xdp;
+			else if (unlikely(err != -ENOSPC))
+				goto err;
+		}
+
 		total_len += len;
 		if (total_len < VHOST_NET_WEIGHT &&
 		    vhost_has_more_pkts(net, vq)) {
@@ -652,11 +657,8 @@ static void handle_tx_copy(struct vhost_net *net)
 
 		/* TODO: Check specific error and bomb out unless ENOBUFS? */
 		err = sock->ops->sendmsg(sock, &msg, len);
-		if (unlikely(err < 0)) {
-			vhost_discard_vq_desc(vq, 1);
-			vhost_net_enable_vq(net, vq);
-			break;
-		}
+		if (unlikely(err < 0))
+			goto err;
 		if (err != len)
 			pr_debug("Truncated TX packet: "
 				 " len %d != %zd\n", err, len);
@@ -675,6 +677,12 @@ static void handle_tx_copy(struct vhost_net *net)
 		vhost_add_used_and_signal_n(&net->dev, vq, vq->heads,
 					    nheads);
 	mutex_unlock(&vq->mutex);
+	return;
+err:
+	vhost_discard_vq_desc(vq, 1);
+	vhost_net_enable_vq(net, vq);
+	mutex_unlock(&vq->mutex);
+	return;
 }
 
 /* Expects to be always run from workqueue - which acts as
