Bottom: ae0ed45e74862845e37d11f5992229fd8357365f
Top:    82fd66133d6788e12e77ab9ce4321e24a5153d2d
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-03-16 18:30:47 +0800

vhost: avoid peeking socket

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index 9b51989..ed8669c 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -28,6 +28,7 @@
 #include <linux/if_macvlan.h>
 #include <linux/if_tap.h>
 #include <linux/if_vlan.h>
+#include <linux/skb_array.h>
 
 #include <net/sock.h>
 
@@ -535,12 +536,25 @@ static int sk_has_rx_data(struct sock *sk)
 	return skb_queue_empty(&sk->sk_receive_queue);
 }
 
-static int vhost_net_rx_peek_head_len(struct vhost_net *net, struct sock *sk)
+static bool sk_rx_array_has_data(struct sock *sk)
+{
+	struct socket *sock = sk->sk_socket;
+	struct skb_array *skb_array = tap_get_skb_array(sock->file);
+
+	if (skb_array)
+		return !__skb_array_empty(skb_array);
+	else
+		return sk_has_rx_data(sk);
+}
+
+static int vhost_net_rx_peek_head_len(struct vhost_net *net,
+				      struct sock *sk)
 {
 	struct vhost_net_virtqueue *nvq = &net->vqs[VHOST_NET_VQ_TX];
 	struct vhost_virtqueue *vq = &nvq->vq;
 	unsigned long uninitialized_var(endtime);
-	int len = peek_head_len(sk);
+	int mergeable = vhost_has_feature(vq, VIRTIO_NET_F_MRG_RXBUF);
+	int len = mergeable ? peek_head_len(sk) : sk_rx_array_has_data(sk);
 
 	if (!len && vq->busyloop_timeout) {
 		/* Both tx vq and rx socket were polled here */
@@ -561,7 +575,7 @@ static int vhost_net_rx_peek_head_len(struct vhost_net *net, struct sock *sk)
 			vhost_poll_queue(&vq->poll);
 		mutex_unlock(&vq->mutex);
 
-		len = peek_head_len(sk);
+		len = mergeable ? peek_head_len(sk) : sk_rx_array_has_data(sk);
 	}
 
 	return len;
@@ -628,7 +642,8 @@ static int get_rx_bufs(struct vhost_virtqueue *vq,
 		++headcount;
 		seg += in;
 	}
-	heads[headcount - 1].len = cpu_to_vhost32(vq, len + datalen);
+	if (quota != 1)
+		heads[headcount - 1].len = cpu_to_vhost32(vq, len + datalen);
 	*iovcount = seg;
 	if (unlikely(log))
 		*log_num = nlogs;
@@ -691,11 +706,20 @@ static void handle_rx(struct vhost_net *net)
 	mergeable = vhost_has_feature(vq, VIRTIO_NET_F_MRG_RXBUF);
 
 	while ((sock_len = vhost_net_rx_peek_head_len(net, sock->sk))) {
-		sock_len += sock_hlen;
-		vhost_len = sock_len + vhost_hlen;
-		headcount = get_rx_bufs(vq, vq->heads, vhost_len,
-					&in, vq_log, &log,
-					likely(mergeable) ? UIO_MAXIOV : 1);
+		if (mergeable) {
+			sock_len += sock_hlen;
+			vhost_len = sock_len + vhost_hlen;
+			headcount = get_rx_bufs(vq, vq->heads, vhost_len,
+						&in, vq_log, &log, UIO_MAXIOV);
+		} else {
+			headcount = get_rx_bufs(vq, vq->heads, 1,
+						&in, vq_log, &log, 1);
+			if (headcount > 0) {
+				vhost_len = vq->heads[0].len;
+				sock_len = vhost_len - vhost_hlen;
+			}
+		}
+
 		/* On error, stop handling until the next kick. */
 		if (unlikely(headcount < 0))
 			goto out;
@@ -733,7 +757,7 @@ static void handle_rx(struct vhost_net *net)
 		/* Userspace might have consumed the packet meanwhile:
 		 * it's not supposed to do this usually, but might be hard
 		 * to prevent. Discard data we got (if any) and keep going. */
-		if (unlikely(err != sock_len)) {
+		if (mergeable && unlikely(err != sock_len)) {
 			pr_debug("Discarded rx packet: "
 				 " len %d, expected %zd\n", err, sock_len);
 			vhost_discard_vq_desc(vq, headcount);
