Bottom: 83401534249699b3aaa0dce2863db1dbe3c25ea2
Top:    cca28af300c85c8d215dd140f9561df9fa1630a4
Author: Jason Wang <jasowang@redhat.com>
Date:   2016-05-18 13:54:51 +0800

introduce skb_ring_recv

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/include/linux/skb_ring.h b/include/linux/skb_ring.h
index caa759b..785cd22 100644
--- a/include/linux/skb_ring.h
+++ b/include/linux/skb_ring.h
@@ -34,7 +34,8 @@ struct skb_ring {
 int skb_ring_init(struct skb_ring *ring, unsigned long size);
 void skb_ring_purge(struct skb_ring *ring);
 int skb_ring_queue(struct skb_ring *ring, struct sk_buff *skb);
-struct sk_buff *skb_ring_dequeue(struct skb_ring *ring);
+struct sk_buff *skb_ring_recv(struct skb_ring *ring, wait_queue_head_t* q,
+			      int nonblock, int *err);
 
 int skb_ring_empty(struct skb_ring *ring)
 {
diff --git a/net/core/skb_ring.c b/net/core/skb_ring.c
index b4f2ec1..903a497 100644
--- a/net/core/skb_ring.c
+++ b/net/core/skb_ring.c
@@ -76,8 +76,7 @@ int skb_ring_queue(struct skb_ring *ring, struct sk_buff *skb)
 }
 EXPORT_SYMBOL(skb_ring_queue);
 
-
-struct sk_buff *skb_ring_dequeue(struct skb_ring *ring)
+static struct sk_buff *skb_ring_dequeue(struct skb_ring *ring)
 {
 	unsigned long head, tail;
 	struct sk_buff *skb = NULL;
@@ -99,5 +98,41 @@ struct sk_buff *skb_ring_dequeue(struct skb_ring *ring)
 
 	return skb;
 }
-EXPORT_SYMBOL(skb_ring_dequeue);
+
+struct sk_buff *skb_ring_recv(struct skb_ring *ring, wait_queue_head_t* q,
+			      int noblock, int *err)
+{
+	DECLARE_WAITQUEUE(wait, current);
+	struct sk_buff *skb = NULL;
+
+	if (!noblock)
+		add_wait_queue(q, &wait);
+
+	while (skb) {
+		if (!noblock)
+			current->state = TASK_INTERRUPTIBLE;
+
+		if (!(skb = skb_ring_dequeue(ring))) {
+			if (noblock) {
+				*err = -EAGAIN;
+				break;
+			}
+			if (signal_pending(current)) {
+				*err = -ERESTARTSYS;
+				break;
+			}
+
+			schedule();
+			continue;
+		}
+	}
+
+	if (!noblock) {
+		current->state = TASK_RUNNING;
+		remove_wait_queue(q, &wait);
+	}
+
+	return skb;
+}
+EXPORT_SYMBOL(skb_ring_recv);
