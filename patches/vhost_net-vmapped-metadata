Bottom: ecf3349983887b66b02c847e0a423f14b14fe43a
Top:    911eb36db2acfdf4ea8e074ef333bd0c148a65c5
Author: Jason Wang <jasowang@redhat.com>
Date:   2017-10-21 22:17:53 +0800

vhost_net: vmapped metadata accessing

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/drivers/vhost/vhost.c b/drivers/vhost/vhost.c
index f3bd8e9..be0bc4c 100644
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@ -1457,6 +1457,26 @@ long vhost_vring_ioctl(struct vhost_dev *d, unsigned int ioctl, void __user *arg
 		vq->avail = (void __user *)(unsigned long)a.avail_user_addr;
 		vq->log_addr = a.log_guest_addr;
 		vq->used = (void __user *)(unsigned long)a.used_user_addr;
+		{
+			struct page *page;
+			unsigned long vaddr;
+
+			r = get_user_pages_fast(vq->desc, 1, 1, &page);
+			if (r < 0)
+				break;
+			BUG_ON(r != 1);
+			vaddr = vmap(&page, 1, VM_MAP, PAGE_KERNEL);
+			if (!vaddr) {
+				printk("vmap fail!\n");
+				put_page(page);
+				r = -EFAULT;
+				break;
+			}
+			printk("vaddr is %p\n", vaddr);
+			vq->desc_vaddr = vaddr +
+				((unsigned long)vq->desc & (PAGE_SIZE - 1));
+			printk("desc_vaddr is %p\n", vq->desc_vaddr);
+		}
 		break;
 	case VHOST_SET_VRING_KICK:
 		if (copy_from_user(&f, argp, sizeof f)) {
@@ -1959,6 +1979,7 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 		      unsigned int *out_num, unsigned int *in_num,
 		      struct vhost_log *log, unsigned int *log_num)
 {
+	struct vring_desc *descp;
 	struct vring_desc desc;
 	unsigned int i, head, found = 0;
 	u16 last_avail_idx;
@@ -2033,6 +2054,7 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			       i, vq->num, head);
 			return -EINVAL;
 		}
+#if 0
 		ret = vhost_copy_from_user(vq, &desc, vq->desc + i,
 					   sizeof desc);
 		if (unlikely(ret)) {
@@ -2040,10 +2062,19 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			       i, vq->desc + i);
 			return -EFAULT;
 		}
-		if (desc.flags & cpu_to_vhost16(vq, VRING_DESC_F_INDIRECT)) {
+#endif
+		descp = vq->desc_vaddr + i;
+#if 0
+		if (!descp || descp < PAGE_SIZE)
+			printk("descp is %p\n", descp);
+		else if (desc.addr != descp->addr || desc.len != descp->len)
+			printk("desc addr %p len %p p addr %p len %p\n",
+				desc.addr, desc.len, descp->addr, descp->len);
+#endif
+		if (descp->flags & cpu_to_vhost16(vq, VRING_DESC_F_INDIRECT)) {
 			ret = get_indirect(vq, iov, iov_size,
 					   out_num, in_num,
-					   log, log_num, &desc);
+					   log, log_num, descp);
 			if (unlikely(ret < 0)) {
 				if (ret != -EAGAIN)
 					vq_err(vq, "Failure detected "
@@ -2053,12 +2084,12 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			continue;
 		}
 
-		if (desc.flags & cpu_to_vhost16(vq, VRING_DESC_F_WRITE))
+		if (descp->flags & cpu_to_vhost16(vq, VRING_DESC_F_WRITE))
 			access = VHOST_ACCESS_WO;
 		else
 			access = VHOST_ACCESS_RO;
-		ret = translate_desc(vq, vhost64_to_cpu(vq, desc.addr),
-				     vhost32_to_cpu(vq, desc.len), iov + iov_count,
+		ret = translate_desc(vq, vhost64_to_cpu(vq, descp->addr),
+				     vhost32_to_cpu(vq, descp->len), iov + iov_count,
 				     iov_size - iov_count, access);
 		if (unlikely(ret < 0)) {
 			if (ret != -EAGAIN)
@@ -2071,8 +2102,8 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			 * increment that count. */
 			*in_num += ret;
 			if (unlikely(log)) {
-				log[*log_num].addr = vhost64_to_cpu(vq, desc.addr);
-				log[*log_num].len = vhost32_to_cpu(vq, desc.len);
+				log[*log_num].addr = vhost64_to_cpu(vq, descp->addr);
+				log[*log_num].len = vhost32_to_cpu(vq, descp->len);
 				++*log_num;
 			}
 		} else {
@@ -2085,7 +2116,7 @@ int vhost_get_vq_desc(struct vhost_virtqueue *vq,
 			}
 			*out_num += ret;
 		}
-	} while ((i = next_desc(vq, &desc)) != -1);
+	} while ((i = next_desc(vq, descp)) != -1);
 
 	/* On success, increment avail index. */
 	vq->last_avail_idx++;
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index 6c844b9..3e3b614 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -88,6 +88,7 @@ struct vhost_virtqueue {
 	struct mutex mutex;
 	unsigned int num;
 	struct vring_desc __user *desc;
+	struct vring_desc __user *desc_vaddr;
 	struct vring_avail __user *avail;
 	struct vring_used __user *used;
 	const struct vhost_umem_node *meta_iotlb[VHOST_NUM_ADDRS];
@@ -144,6 +145,7 @@ struct vhost_virtqueue {
 	bool user_be;
 #endif
 	u32 busyloop_timeout;
+	struct page *desc_page;
 };
 
 struct vhost_msg_node {
