Bottom: a572c476634a0796baa6cff589973b11c1bc3251
Top:    4d4dd3be1f43efa6e38a28a241ed37e01ccdeef5
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-05-13 08:16:42 +0800

tuntap: simplify error handling in tun_build_skb()

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 0e9fe12..25e90dd 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -1624,7 +1624,7 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
 				     int len, int *skb_xdp)
 {
 	struct page_frag *alloc_frag = &current->task_frag;
-	struct sk_buff *skb;
+	struct sk_buff *skb = NULL;
 	struct bpf_prog *xdp_prog;
 	int buflen = SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 	unsigned int delta = 0;
@@ -1650,6 +1650,9 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
 	if (copied != len)
 		return ERR_PTR(-EFAULT);
 
+	get_page(alloc_frag->page);
+	alloc_frag->offset += buflen;
+
 	/* There's a small window that XDP may be set after the check
 	 * of xdp_prog above, this should be rare and for simplicity
 	 * we do XDP on skb in case the headroom is not enough.
@@ -1677,23 +1680,16 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
 
 		switch (act) {
 		case XDP_REDIRECT:
-			get_page(alloc_frag->page);
-			alloc_frag->offset += buflen;
 			err = xdp_do_redirect(tun->dev, &xdp, xdp_prog);
 			xdp_do_flush_map();
 			if (err)
-				goto err_redirect;
-			rcu_read_unlock();
-			local_bh_enable();
-			return NULL;
+				goto err_xdp;
+			goto out;
 		case XDP_TX:
-			get_page(alloc_frag->page);
-			alloc_frag->offset += buflen;
 			if (tun_xdp_tx(tun->dev, &xdp))
-				goto err_redirect;
-			rcu_read_unlock();
-			local_bh_enable();
-			return NULL;
+				goto err_xdp;
+			tun_xdp_flush(tun->dev);
+			goto out;
 		case XDP_PASS:
 			delta = orig_data - xdp.data;
 			len = xdp.data_end - xdp.data;
@@ -1712,23 +1708,23 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
 	local_bh_enable();
 
 	skb = build_skb(buf, buflen);
-	if (!skb)
-		return ERR_PTR(-ENOMEM);
+	if (!skb) {
+		skb = ERR_PTR(-ENOMEM);
+		goto out;
+	}
 
 	skb_reserve(skb, pad - delta);
 	skb_put(skb, len);
-	get_page(alloc_frag->page);
-	alloc_frag->offset += buflen;
 
 	return skb;
 
-err_redirect:
-	put_page(alloc_frag->page);
 err_xdp:
+	alloc_frag->offset -= buflen;
+	put_page(alloc_frag->page);
+out:
 	rcu_read_unlock();
 	local_bh_enable();
-	this_cpu_inc(tun->pcpu_stats->rx_dropped);
-	return NULL;
+	return skb;
 }
 
 /* Get packet from user space buffer */
diff --git a/drivers/net/tun.c.rej b/drivers/net/tun.c.rej
new file mode 100644
index 0000000..f19df4f
--- /dev/null
+++ b/drivers/net/tun.c.rej
@@ -0,0 +1,64 @@
+--- drivers/net/tun.c
++++ drivers/net/tun.c
+@@ -1659,24 +1662,16 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
+ 
+ 		switch (act) {
+ 		case XDP_REDIRECT:
+-			get_page(alloc_frag->page);
+-			alloc_frag->offset += buflen;
+ 			err = xdp_do_redirect(tun->dev, &xdp, xdp_prog);
+ 			xdp_do_flush_map();
+ 			if (err)
+-				goto err_redirect;
+-			rcu_read_unlock();
+-			preempt_enable();
+-			return NULL;
++				goto err_xdp;
++			goto out;
+ 		case XDP_TX:
+-			get_page(alloc_frag->page);
+-			alloc_frag->offset += buflen;
+ 			if (tun_xdp_xmit(tun->dev, &xdp))
+-				goto err_redirect;
++				goto err_xdp;
+ 			tun_xdp_flush(tun->dev);
+-			rcu_read_unlock();
+-			preempt_enable();
+-			return NULL;
++			goto out;
+ 		case XDP_PASS:
+ 			delta = orig_data - xdp.data;
+ 			break;
+@@ -1695,25 +1690,23 @@ static struct sk_buff *tun_build_skb(struct tun_struct *tun,
+ 
+ 	skb = build_skb(buf, buflen);
+ 	if (!skb) {
+-		rcu_read_unlock();
+-		preempt_enable();
+-		return ERR_PTR(-ENOMEM);
++		skb = ERR_PTR(-ENOMEM);
++		goto out;
+ 	}
+ 
+ 	skb_reserve(skb, pad - delta);
+ 	skb_put(skb, len + delta);
+-	get_page(alloc_frag->page);
+-	alloc_frag->offset += buflen;
+ 
+ 	return skb;
+ 
+-err_redirect:
+-	put_page(alloc_frag->page);
+ err_xdp:
++	alloc_frag->offset -= buflen;
++	put_page(alloc_frag->page);
++	this_cpu_inc(tun->pcpu_stats->rx_dropped);
++out:
+ 	rcu_read_unlock();
+ 	preempt_enable();
+-	this_cpu_inc(tun->pcpu_stats->rx_dropped);
+-	return NULL;
++	return skb;
+ }
+ 
+ /* Get packet from user space buffer */
