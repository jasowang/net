Bottom: d8a3190bd956dce84135211fb4efa7ce833a7563
Top:    88bba080aac2fb2cc0db59233df27aba25bac2f8
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-05-13 08:43:46 +0800

vhost_net: passing raw xdp buff to tun

Signed-off-by: Jason Wang <jasowang@redhat.com>

---

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 2560378..4102f0f 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -2387,6 +2387,28 @@ static void tun_sock_write_space(struct sock *sk)
 	kill_fasync(&tfile->fasync, SIGIO, POLL_OUT);
 }
 
+static void tun_xdp_one(struct tun_struct *tun,
+			struct tun_file *tfile,
+			struct xdp_buff *xdp)
+{
+	struct bpf_prog *xdp_prog;
+	int buflen;
+
+	preempt_disable();
+	rcu_read_lock();
+
+	xdp_prog = rcu_dereference(tun->xdp_prog);
+	if (xdp_prog) {
+		xdp_set_data_meta_invalid(xdp);
+		xdp->rxq = &tfile->xdp_rxq;
+		buflen = *(int *)xdp->data_hard_start;
+		tun_do_xdp(tun, tfile, xdp_prog, xdp, buflen);
+	}
+
+	rcu_read_unlock();
+	preempt_enable();
+}
+
 static int tun_sendmsg(struct socket *sock, struct msghdr *m, size_t total_len)
 {
 	int ret;
@@ -2396,9 +2418,17 @@ static int tun_sendmsg(struct socket *sock, struct msghdr *m, size_t total_len)
 	if (!tun)
 		return -EBADFD;
 
+	if (m->msg_control) {
+		struct xdp_buff *xdp = m->msg_control;
+		tun_xdp_one(tun, tfile, xdp);
+		ret = total_len;
+		goto out;
+	}
+
 	ret = tun_get_user(tun, tfile, m->msg_control, &m->msg_iter,
 			   m->msg_flags & MSG_DONTWAIT,
 			   m->msg_flags & MSG_MORE);
+out:
 	tun_put(tun);
 	return ret;
 }
diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c
index 75501d2..80add75 100644
--- a/drivers/vhost/net.c
+++ b/drivers/vhost/net.c
@@ -578,6 +578,7 @@ static void handle_tx_copy(struct vhost_net *net)
 {
 	struct vhost_net_virtqueue *nvq = &net->vqs[VHOST_NET_VQ_TX];
 	struct vhost_virtqueue *vq = &nvq->vq;
+	struct xdp_buff xdp;
 	unsigned out, in;
 	int head;
 	struct msghdr msg = {
@@ -636,6 +637,11 @@ static void handle_tx_copy(struct vhost_net *net)
 		vq->heads[nheads].id = cpu_to_vhost32(vq, head);
 		vq->heads[nheads].len = 0;
 
+		err = vhost_net_build_xdp(nvq, sock, &msg.msg_iter, &xdp);
+		if (!err)
+			msg.msg_control = &xdp;
+		else
+			msg.msg_control = NULL;
 		total_len += len;
 		if (total_len < VHOST_NET_WEIGHT &&
 		    vhost_has_more_pkts(net, vq)) {
@@ -759,6 +765,7 @@ static void handle_tx_zerocopy(struct vhost_net *net)
 			msg.msg_control = NULL;
 			ubufs = NULL;
 		}
+
 		total_len += len;
 		if (total_len < VHOST_NET_WEIGHT &&
 		    vhost_has_more_pkts(net, vq)) {
