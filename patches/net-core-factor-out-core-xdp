Bottom: b0ecd471b0f25ce78f73e8e65dcc7c0ea14fa2d0
Top:    e1fa64b7f4a54d474fe94c634bb3cc44ad1004b2
Author: Jason Wang <jasowang@redhat.com>
Date:   2018-07-11 11:15:18 +0800

net: core: factor out core XDP generic logic

Signed-off-by: Jason Wang <jasowang@redhat.com>


---

diff --git a/net/core/dev.c b/net/core/dev.c
index 57f9190..9babea7 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -4162,25 +4162,16 @@ static int netif_receive_generic_xdp_prepare(struct sk_buff *skb,
 	return 0;
 }
 
-static u32 netif_receive_generic_xdp(struct sk_buff *skb,
-				     struct xdp_buff *xdp,
-				     struct bpf_prog *xdp_prog)
+static u32 do_xdp_generic_core(struct sk_buff *skb,
+			       struct xdp_buff *xdp,
+			       struct bpf_prog *xdp_prog)
 {
 	struct netdev_rx_queue *rxqueue;
 	void *orig_data, *orig_data_end;
 	u32 metalen, act = XDP_DROP;
-	int hlen, off, err;
+	int hlen, off;
 	u32 mac_len;
 
-	err = netif_receive_generic_xdp_prepare(skb, xdp, xdp_prog);
-
-	if (err == -ENOTSUPP)
-		return XDP_PASS;
-	if (err) {
-		act = XDP_DROP;
-		goto do_drop;
-	}
-
 	/* The XDP program wants to see the packet starting at the MAC
 	 * header.
 	 */
@@ -4232,7 +4223,6 @@ static u32 netif_receive_generic_xdp(struct sk_buff *skb,
 		trace_xdp_exception(skb->dev, xdp_prog, act);
 		/* fall through */
 	case XDP_DROP:
-	do_drop:
 		kfree_skb(skb);
 		break;
 	}
@@ -4240,6 +4230,27 @@ static u32 netif_receive_generic_xdp(struct sk_buff *skb,
 	return act;
 }
 
+static u32 netif_receive_generic_xdp(struct sk_buff *skb,
+				     struct xdp_buff *xdp,
+				     struct bpf_prog *xdp_prog)
+{
+	u32 act;
+	int err;
+
+	err = netif_receive_generic_xdp_prepare(skb, xdp, xdp_prog);
+
+	if (err == -ENOTSUPP)
+		return XDP_PASS;
+	if (err) {
+		kfree_skb(skb);
+		return XDP_DROP;
+	}
+
+	act = do_xdp_generic_core(skb, xdp, xdp_prog);
+
+	return act;
+}
+
 /* When doing generic XDP we have to bypass the qdisc layer and the
  * network taps in order to match in-driver-XDP behavior.
  */
